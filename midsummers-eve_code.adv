#########################
# Game Info
#########################

redescribe = auto_beta
loading_screen = intro
start_at = loc_town1
start_theme = main_theme

game_information {
	game_name = Midsummer's Eve
 	game_shortname = Midsummer
	written_by = Tristin Grizel Dean
 	uuid = 9eb3f538-4258-42b0-b7f3-ae3e9eb98aec
	year_of_release = 2023
	game_version = 1.0.7
	compatibility_version = 1
	copyright_message = Copyright (C) 2022 Tristin Grizel Dean. Not for commercial use. Do not redistribute.
	aimed_at  = [ children,teenagers,adults ]
	suitable_for  = [ children,teenagers,adults ]
	tags  = [ adventure,puzzles,treasure,playful ]
}

#########################
# DEBUGGER # ON DEBUG
#########################

   # Make sure to comment out the ENTIRE on_debug section, or your game will skip over the on_startup section.

// on_debug {
//    : goto "loc_witch";
//    : set_false "tutorial_is_on" ;
//    : set_true "finished_intro" ;
//    : set_true "learned_about_mystery" ;
//    : set_integer var="mystery_clues" value="3" ;
//    : set_integer var="reed_found" value="0" ;
//    : set_integer var="clara_found" value="2" ;
//    : set_integer var="sophie_found" value="5" ;
//    : set_integer var="francis_found" value="10" ;
//    : create "z_clara" ;
//    : create "z_francis" ;
//    : create "z_reed" ;
//    : create "z_sophie" ;
//    : create "hotdog" target="inventory" ;
//    : add_trait subject="hotdog" trait="t_pickles" ;
//    : create "golden_crown" target="inventory" ;
//    : set_integer var = "clues_remain"  value = "0" ;
//    : set_true "achievement_fed_gryphon_pizza" ;
//    : set_true "achievement_won_wheel_fortune" ;
// }

#########################
# SYNONYMS # VOCABULARY
#########################

vocabulary {
   : adjective / aliases = [poison,poisonous,venomous]
   : noun / aliases = [clue,clues]
   : noun / aliases = [self,yourself,body,arms,face,myself,me]
   : noun / aliases = [dirt,soil]
   : noun / aliases = [money,coin,coins,cash]
   : noun / aliases = [news,newspaper,newspapers,book,books,magazine,magazines,media]
   : noun / aliases = [grave,graves,headstone,headstones,tombstone,tombstones,tomb,tombs,stone]
   : adjective / aliases = [free,first]
   : adjective / aliases = [blessed,third]
   : adjective / aliases = [loved,sixth]
   : noun / aliases = [house,cabin,hut,cottage]
   : noun / aliases = [gryphon,griffon,griffin,bird]
   : noun / aliases = [dog,buddy]
   : noun / aliases = [pansies,pansy]
   : noun / aliases = [zone,area,bed,section,ring,bullseye]
   : noun / aliases = [toy,ladybug,bug]
   : noun / aliases = [mushroom,mushrooms,shroom,shrooms]
   : noun / aliases = [witch,edwina,edweena]
   : noun / aliases = [water,river,stream,creek,pond,lake]
   : verb / aliases = [examine,view,see,inspect]
   : verb / aliases = [talk,speak,converse,ask]
   : verb / aliases = [tell,say]
   : verb / aliases = [listen,hear,eavesdrop,spy]
   : verb / aliases = [put,place,set]
   : verb / aliases = [cut,snip,clip]
   : verb / aliases = [stab,prick,wound]
   : verb / aliases = [pet,scratch,rub,stroke]
   : verb / aliases = [get,take,nab,snatch,bag,pick]
   : verb / aliases = [give,sell,trade,offer]
   : verb / aliases = [buy,purchase,order]
   : verb / aliases = [touch,feel]
   : verb / aliases = [drop,store]
   : verb / aliases = [dig,unbury,unearth,search]
}

#########################
# INTEGERS
#########################

integers {
   temp_int : integer ;
   random : integer ;
   
   # This integer must be accompanied by inventory_items_limit_var = inventory_limit in the game_settings
   inventory_limit : integer "100" ;

   # This number will update +1 every 7 turns, and +1 every time the player moves between locations. As time passes, the other "players" in the game will find more clues. CTRL+F time_passed to see more.
   time_passed : integer "0" ;

   # This is the number of clues that remain for the player to find - it will decrease by 1 each time they find a clue. CTRL+F clues_remain to see more.
   clues_remain : integer "12" ;
   # This is the number of clues that the other treasure hunters have found
   clara_found : integer "0" ;
   elle_found : integer "0" ;
   sophie_found : integer "0" ;
   ollie_found : integer "0" ;
   reed_found : integer "0" ;
   francis_found : integer "0" ;
   # Once any other player reaches 12 clues, this increments on each tick. If it gets to 30, someone else wins the game.
   another_player_might_win : integer "0" ;

   mystery_clues : integer "0" ; // For the mayor mystery side-story
   darts : integer "3" ; // Darts game at loc_darts
   points : integer "10" ; // Wheel of fortune
   bet : integer "0" ; // Wheel of fortune
   attempts : integer "6" ; // Guess the number
   knocks : integer "0" ; // Knocks on the grave at loc_graveyard
   cauldron_ingredients : integer "0" ; // Cauldron brewing at loc_witch
}

#########################
# BOOLEANS
#########################

booleans {
   ## TUTORIAL
   tutorial_is_on : boolean default="true" scope="survivor";
   tutorial_is_finished : boolean ;
   type_return : boolean ;
   has_checked_inventory : boolean ;
   has_checked_clues : boolean ;
   has_typed_look : boolean ;
   end_game : boolean ;
   
   ## STORY
   finished_intro : boolean ;
   fed_gryphon_pizza : boolean ;
   learned_about_mystery : boolean ;
   mayor_isnt_serious : boolean ;
   no_investigation : boolean ;
   customer_stole_necklace : boolean ;
   returned_necklace : boolean ;
   stolen_ring : boolean ;
   returned_ring : boolean ;
   mayor_at_puppets : boolean ;
   mayor_at_tower : boolean ;
   mayor_at_tower_disappeared : boolean ;
   xyzzy : boolean ;

   ## CONVERSATION
   # These are used for temporary local booleans during conversations. They reset when a new conversation is started. See the talk_mayor : subroutine for an example.
   convo1 : boolean ;
   convo2 : boolean ;
   convo3 : boolean ; 
   convo4 : boolean ; 
   convo5 : boolean ;
   convo6 : boolean ;
   
   ## LOCATION SPECIFIC
   revealed_bobber : boolean ; // town (south)
   holding_bobber : boolean ; // town (south)
   tiny_door_open : boolean ; // path 2
   has_visited_towertop : boolean ; // tower
   fed_the_dog : boolean ; // river 2
   playing_darts : boolean ; // darts
   get_prize : boolean ; // darts
   saw_fortune_intro : boolean ; // wheel of fortune
   bet_on_red : boolean ; // wheel of fortune
   landed_on_red : boolean ; // wheel of fortune
   stop_playing_fortune : boolean ; // wheel of fortune
   on_tall_mushroom : boolean ; // mushrooms2
   on_gigantic_mushroom : boolean ; // mushrooms2
   knocked_on_blessed : boolean ; // graveyard
   knocked_on_loved : boolean ; // graveyard
   knocked_on_free : boolean ; // graveyard
   
   ## CLUES
   example_boolean : boolean ;
   unraveled_toy : boolean ; // plush_toy
   
   ## ACHIEVEMENT BOOLEANS
   # Booleans with a survivor scope keep their setting even when the game is restarted.
   achievement_won_the_game : boolean scope="survivor" ;
   achievement_lost_the_game : boolean scope="survivor" ;
   achievement_brewed_perfume : boolean scope="survivor" ;
   achievement_brewed_liquid_fire : boolean scope="survivor" ;
   achievement_belched_fire : boolean scope="survivor" ;
   achievement_kissed_the_frog : boolean scope="survivor" ;
   achievement_gave_witch_apple : boolean scope="survivor" ;
   achievement_fed_gryphon_pizza : boolean scope="survivor" ;
   achievement_won_magic_number : boolean scope="survivor" ;
   achievement_won_wheel_fortune : boolean scope="survivor" ;
   achievement_went_swimming : boolean scope="survivor" ;
   achievement_caught_the_mayor : boolean scope="survivor" ;
   achievement_new_pet_chicken : boolean scope="survivor" ;
   achievement_returned_necklace : boolean scope="survivor" ;
   achievement_returned_ring : boolean scope="survivor" ;
}

#########################
# Traits
#########################

traits {
   t_plural : trait ;
   t_character : trait ;

   # Inventory traits
   t_clue : trait ;
   t_food : trait ;
   t_ingredient : trait ;
   t_item : trait ;

   t_pickles : trait ; // For the hotdog
   t_lime : trait ; // For the popcorn

   t_in_cauldron : trait ; // For potion brewing at loc_witch

   # Traits for the darts game
   t_hand : trait ;
   t_bullseye : trait ;
   t_white : trait ;
   t_black : trait ;
   t_red : trait ;
   t_green : trait ;
}

#########################
# STRINGS
#########################

strings {
   ## SYSTEM
   clues_remaining : dynamic_string ("<Clues remaining: "+clues_remain+"<#fa7>>[clues]");
   current_location : dynamic_string (h());
   it_or_them : dynamic_string (s1_has_trait "t_plural" ? "them" : "it" );
   a_or_some : dynamic_string (s1_has_trait "t_plural" ? "some" : "a" );
   temp_name : string ;
   password : string ;

   # This makes it so players can click on these links displayed at the top of each page instead of having to type them.
   links : string "^c^<INVENTORY<0>>[inventory] <✤<#fff>> <CLUES<0>>[clues] <✤<#fff>> <MAP<0>>[map] <✤<#fff>> <HELP<0>>[help]\n" ;
   location_links : dynamic_string (
      "^c^Go to: <return<#abf>>[LOOK]" +
      (is_exit_listed(1) ? ", <north<#abf>>[NORTH]":"") +
      (is_exit_listed(3) ? ", <east<#abf>>[EAST]":"") +
      (is_exit_listed(5) ? ", <south<#abf>>[SOUTH]":"") +
      (is_exit_listed(7) ? ", <west<#abf>>[WEST]":"") +
      (is_exit_listed(11) ? ", <enter<#abf>>[ENTER]":"") +
      (is_exit_listed(12) ? ", <exit<#abf>>[EXIT]":"") +
   ""
   ) ;

   ## ACHIEVEMENTS
achievements : string "^c^Achievements:^n^{achievement_won_the_game ? `\nWon the game`}{achievement_lost_the_game ? `\nLost the game`}{achievement_gave_witch_apple ? `\nWitches love apples`}{achievement_fed_gryphon_pizza ? `\nGryphons love pizza`}{achievement_kissed_the_frog ? `\nThe frog is no prince charming`}{achievement_won_magic_number ? `\nGuessed the magic number`}{achievement_won_wheel_fortune ? `\nMastered the wheel of fortune`}{achievement_went_swimming ? `\nWent for a swim`}{achievement_brewed_perfume ? `\nBrewed a floral perfume`}{achievement_brewed_liquid_fire ? `\nBrewed liquid fire`}{achievement_belched_fire ? `\nBelched fire like a dragon`}{achievement_returned_necklace ? `\nReturned the stolen necklace`}{achievement_returned_ring ? `\nReturned the stolen ring`}{achievement_new_pet_chicken ? `\nGot a new pet chicken`}{achievement_caught_the_mayor ? `\nCaught the mayor`}" ;
   
   ## DYNAMIC OBJECTS / SCENERY
   necklace_name : dynamic_string (has_taken "necklace" ? "a necklace[examine necklace]":"something shiny[examine shiny]") ;
   ring_name : dynamic_string (has_taken "ring" ? "a ring[examine ring]":"something sparkly[examine sparkly object]") ;
   cauldron_desc : string "It's a sturdy, well-used cauldron. There's nothing in it right now." ;
   hotdog_name : string "hotdog with -topping-" ;
   pizza_name : string "pizza with -topping-" ;
   popcorn_name : string "popcorn with -topping-" ;
   apple_name : string "candy apple with -topping-" ;
   plush_toy_desc : dynamic_string (unraveled_toy ? "The ladybug plush toy has an open seam, exposing its fluffy innards." : "It's a cute red ladybug with black spots, but a <loose thread>[EXAMINE THREAD] is hanging out of it.") ;
   red_dart_desc : dynamic_string (
      has_trait {subject="red_dart" trait="t_hand"} ? "in your hand." :
      has_trait {subject="red_dart" trait="t_bullseye"} ? "in the <bullseye<#a10>>." :
      has_trait {subject="red_dart" trait="t_black"} ? "in the <black<#000>> zone." :
      has_trait {subject="red_dart" trait="t_white"} ? "in the <^b^white> zone." :
      has_trait {subject="red_dart" trait="t_red"} ? "in the <red<#a10>> zone." :
      has_trait {subject="red_dart" trait="t_green"} ? "in the <green<#0d2>> zone." :
      "not in play."
   ) ;
   blue_dart_desc : dynamic_string (
      has_trait {subject="blue_dart" trait="t_hand"} ? "in your hand." :
      has_trait {subject="blue_dart" trait="t_bullseye"} ? "in the <bullseye<#a10>>." :
      has_trait {subject="blue_dart" trait="t_black"} ? "in the <black<#000>> zone." :
      has_trait {subject="blue_dart" trait="t_white"} ? "in the <^b^white> zone." :
      has_trait {subject="blue_dart" trait="t_red"} ? "in the <red<#a10>> zone." :
      has_trait {subject="blue_dart" trait="t_green"} ? "in the <green<#0d2>> zone." :
      "not in play."
   ) ;
   yellow_dart_desc : dynamic_string (
      has_trait {subject="yellow_dart" trait="t_hand"} ? "in your hand." :
      has_trait {subject="yellow_dart" trait="t_bullseye"} ? "in the <bullseye<#a10>>." :
      has_trait {subject="yellow_dart" trait="t_black"} ? "in the <black<#000>> zone." :
      has_trait {subject="yellow_dart" trait="t_white"} ? "in the <^b^white> zone." :
      has_trait {subject="yellow_dart" trait="t_red"} ? "in the <red<#a10>> zone." :
      has_trait {subject="yellow_dart" trait="t_green"} ? "in the <green<#0d2>> zone." :
      "not in play."
   ) ;

   ## CHARACTER DESCRIPTIONS
   mayor_desc : dynamic_string (
      finished_intro ? "He's a tall, solid-looking man with a large mustache. He has been the mayor here since you were 8-years-old." : 
      "The mayor is giving a speech[listen to speech] about the treasure hunt."
   ) ;
   clara_desc : dynamic_string ("^n^A girl with a braided ponytail and rosy cheeks, wearing a simple cotton dress and scuffed lace-up boots.\n<^b^She has found "+(clara_found)+" clues so far.>^m^") ;
   elle_desc : dynamic_string ("^n^A girl with dark curls and glasses, wearing a pleated skirt, a crisp blouse, and Mary Jane shoes.\n<^b^She has found "+(elle_found)+" clues so far.>^m^") ;
   sophie_desc : dynamic_string ("^n^A girl with curly golden locks and a wide-brimmed hat, wearing faded overalls.\n<^b^She has found "+(sophie_found)+" clues so far.>^m^") ;
   ollie_desc : dynamic_string ("^n^A boy with slicked-back blonde hair and a collared shirt, wearing pressed pants and leather shoes.\n<^b^He has found "+(ollie_found)+" clues so far.>^m^") ;
   reed_desc : dynamic_string ("^n^A tall, lanky boy with wild dark hair wearing worn trousers.\n<^b^He has found "+(reed_found)+" clues so far.>^m^") ;
   francis_desc : dynamic_string ("^n^A boy with a mop of wild hair and freckles, wearing dungarees and gumboots.\n<^b^He has found "+(francis_found)+" clues so far.>^m^") ;
   

   ## LOCATION DESCRIPTIONS
   loc_town1_desc : string "{finished_intro ? `Houses line the river here. The evening air is crisp and the water is calm.`:`You join the other children who are floating in boats, huddled around the mayor[examine mayor]. He is giving a speech about the Midsummer's Eve Treasure Hunt.`}" ;
   //   loc_town2_desc : string "You drift along the river, passing a row of houses. {example_boolean ? `Cheerful sounds of excitement and music float through the air.`:`Cheerful sounds of excitement and music float through the air.`}" ;
   loc_town2_desc : string "{holding_bobber ? `You float in the middle of the river, holding onto a bobber.`:`You drift along the river, passing a row of houses[examine houses].`} Cheerful sounds of excitement and music float through the air." ;
   loc_shops1_desc : string "On the river bank are the two most popular shops in town: <Sammy's>[examine Sammy] <Food Shack>[examine food shack], and <Alba's>[examine Alba] <News Stand>[examine news stand]." ;
   loc_shops2_desc : string "The flower shop is here. A brightly lit sign advertises the Midsummer Circus, which is to the east." ;
   loc_circus1_desc : string "There is a whimsical buildin[examine building]g selling circus tickets[examine tickets] and <cotton candy>[examine cotton candy]. You can hear yelling and laughter coming from the circus arena[examine arena]." ;
   loc_circus2_desc : string "Lights and decorations dazzle you. A bustling crowd mills around you, filled with people from nearby towns." ;
   loc_darts_desc : dynamic_string (
      playing_darts ? "^n^The <red<#a10>> dart is {red_dart_desc}\nThe <blue<#8bf>> dart is {blue_dart_desc}\nThe <yellow<#ff0>> dart is {yellow_dart_desc}^m^" :
      get_prize ? "You've hit the dartboard with all three darts." :
      "You're at the game of darts. There's a large dartboard with red, green, black, and white <zones<#000>>. The game is played with three <darts<#000>>, which are red, yellow, and blue."
   ) ;
   loc_fortune_desc : dynamic_string (
      "You're at the wheel of fortune. There's a large circle that is half red and half blue, with a spinner in the middle."
   ) ;
   loc_ferriswheel_desc : string "Your basket swings gently back and forth as you ride up to the top, then back down. You can see lights, the river, and trees for miles around." ;
   loc_river1_desc : string "The water becomes a bit calmer, and the noises of the town sound farther away." ;
   loc_river2_desc : string "You're on the outskirts of town. <Buddy the dog>[examine dog] prances around your favorite oak tree[examine tree]." ;
   loc_bridge_desc : string "The river flows under a small stone bridge[examine bridge]. A path leads from the bridge to the west, heading into the forest." ;
   loc_enchanted1_desc : string "The river narrows as it moves into the forest. The air here is still, and you can hear an owl hooting in the trees." ;
   loc_witch_desc : string "The narrow river meanders around a <witch's hut>[examine witch's hut]. Mist surrounds the hut, making it difficult to peer into the forest." ;
   loc_graveyard_desc : string "You're in an old and forgotten graveyard[examine graveyard], full of crumbling headstones[examine headstones] engraved with names you don't know." ;
   loc_mushrooms1_desc : string "Mushrooms and flowers surround a treehouse[examine treehouse], which is next to a clear creek." ;
   loc_mushrooms2_desc : string "Huge mushrooms[examine mushrooms] fill this part of the forest and fill the air with mushroom spores. They look almost like trees." ;
   loc_fairy_desc : string "Large trees loom over a fairy's[examine fairy] cottage[examine cottage], which is covered in flowers. The fairy[examine fairy] sits on her roof, watching the pond." ;
   loc_pathmagical_desc : string "You're on a stone path leading through the moonlit forest, alongside a meandering stream[examine stream]." ;
   loc_path1_desc : string "The path here runs north toward the tower, south toward the fairy cottage, and east toward the bridge." ;
   loc_flowers_desc : string "Flowers[examine flowers] cover the hillside, and a break in the trees reveals mountains[examine mountains] in the distance." ;
   loc_path2_desc : string "You're on a path that winds through the forest. You see a large tree with a tiny door[examine door] at its base." ;
   loc_tower_desc : string "A stone tower[examine tower] stands tall above the river, and a path leads into the forest." ;
   loc_towertop_desc : string "You're standing on the top of the tower[examine tower]. Below is the northern end of the river, surrounded by forest. Faint sounds from the town travel on the breeze." ;
}

#########################
# COLLECTIONS # LISTS
#########################

collections {
   inventory_food : list ;
   inventory_ingredients : list ;
   inventory_items : list ;
   inventory_worn : list ;
   clues_found : list ;
   cauldron_contains : list ;
   clues_list_start : list {
      items  = [ 
         I heard there's something on the Ferris Wheel
         I heard there's a clue in the cotton candy
         I heard there's a clue in the stream near the Magical Path
         I heard there's a clue on top of a mushroom
         I heard you have to climb the tower
         I heard you have to open a tiny door
         I heard there's a fishing pole on the bridge
      ]
   }
   clues_list1 : list {
      items  = [ 
         Did you try climbing the mushrooms yet?
         Did you ride the ferris wheel?
         Did you eat the cotton candy?
         Did you get the webcap yet?
         Did you look at the weird lights in the stream?
         There's a clue on top of the tower.
         Did you read the headstones in the graveyard?
         Did you give a frog to the fairy?
         Did you unravel the ladybug toy from the darts game?
         Did you use the popcorn as bait yet?
         I guess fish really like popcorn with lime!
         You have to feed a weird hotdog to Buddy!
         Did you give the potion to the witch?
      ]
   }
   clues_list2 : list {
      items  = [ 
         Did you read the headstones in the graveyard?
         I heard the fairy really likes frogs.
         I heard that you have to throw the darts at certain colors.
         I heard that you're supposed to fish with the popcorn.
         I guess fish really like popcorn with lime!
         You have to feed a weird hotdog to Buddy!
         Did you give the potion to the witch?
         I guess Buddy really likes hotdogs with pickles!
         The only flowers you need are asters and pansies.
         You need webcaps and two flowers for the potion.
         It was really hard to throw the blue dart on the green zone!
         You have to whistle at the tower.
         Put popcorn with lime on the fishing hook before fishing!
      ]
   }
   clues_list3 : list {
      items  = [ 
         I guess Buddy really likes hotdogs with pickles!
         It was really hard to throw the blue dart on the green zone!
         You have to whistle at the tower.
         Put popcorn with lime on the fishing hook before fishing!
         Did you knock on the three graves?
         Did you whistle while you were at the tower?
         Give Buddy a hotdog with pickles and he'll let you near the tree!
         I used webcap and aster and pansies in the cauldron.
         Knock on graves one and three and six!
         There was a note inside the ladybug toy!
         At the darts game you have to throw the yellow dart at the black zone.
         The only flowers you need are asters and pansies.
         You need webcaps and two flowers for the potion.
      ]
   }
}

#########################
# ON STARTUP
#########################

on_startup {

   : print_graphic "intro" align = "center" ;
   : if (is_mobile()) {
      : print "^c^<TOUCH SCREEN to begin.<#abf>>" ;
   }
   : else {
      : print "^c^<Press ENTER to begin.<#abf>>" ;
   }
   : press_any_key ;
   : clear_screen ;
   : play_music "music_celtic" ;
   : print "\n\n" ;
   : print "^c^It's Midsummer's Eve.\nThe annual Midsummer Circus is in town, but more importantly, tonight is the Midsummer's Eve Treasure Hunt.\nEvery summer, the 13-year-old children of the town compete to find the Midsummer Treasure. This is your year... and you're going to win." ;
   : press_any_key ;
   : print "^c^✤" ;
   : pause "500" ;
   : print "^c^<Tutorial mode is currently ON.<#abf>>" ;
   : pause "800" ;
   : print "^c^<Type TUTORIAL OFF to turn it off.<#abf>>" ;
   
   : set_true "tutorial_is_on" ;
   : press_any_key ;

}

#########################
## LOCATIONS
#########################

locations {

   you_win : location header="Ceremony[look]" graphic="loc_town1" layout="SB +G" {
      on_describe {
         : if (end_game) {
            : print "^c^The End" ;
            : gosub "list_achievements" ;
            : print "Type CREDITS[credits] to see the credits.\nType RESTART[restart] to play again." ;
            : done ;
         }
         : print "The townsfolk surround you on boats and the shoreline, cheering and clapping." ;
         : pause "1600" ;
         : print "\"Well folks,\" the mayor says with thumbs hooked on his suspenders, \"we have ourselves a winner for the 24th annual Midsummer's Eve Treasure Hunt!\"" category="dark" ;
         : pause "2000" ;
         : print "The crowd cheers loudly." ;
         : press_any_key ;
         : print "\"As is tradition, the winner gets to make any request of the mayor! (Terms and conditions apply.)\"" category="dark" ;
         : pause "1600" ;
         : gosub "end_game_request" ;
         : press_any_key ;
         : set_true "end_game" ;
         : redescribe ;
      }
      on_command {
         : match "go _ ;travel _ ;e -;w -;n -;s -" {
            : print "Type RESTART to play again." ;
            : done ;
         }
      }
   }
   you_lose : location header="Ceremony[look]" graphic="loc_town1" layout="SB +G" {
      on_describe {
         : if (end_game) {
            : print "^c^The End" ;
            : gosub "list_achievements" ;
            : print "Type CREDITS[credits] to see the credits.\nType RESTART[restart] to play again." ;
            : done ;
         }
         : else {
            : print "The townsfolk surround the winner on boats and the shoreline, cheering and clapping." ;
            : pause "1600" ;
            : print "\"Well folks,\" the mayor says with thumbs hooked on his suspenders, \"we have ourselves a winner for the 24th annual Midsummer's Eve Treasure Hunt!\"" category="dark" ;
            : pause "2000" ;
            : print "The crowd cheers loudly." ;
            : press_any_key ;
            : print "\"As is tradition, the winner gets to make any request of the mayor! (Terms and conditions apply.)\"" category="dark" ;
            : pause "1600" ;
            : print "You look on as the winner makes their request to the mayor, wondering when your chance will be to tell the town about the mayor's misdeeds..." ;
            : pause "2000" ;
            : press_any_key ;
            : set_true "end_game" ;
            : redescribe ;
         }
      }
      on_command {
         : match "go _ ;travel _ ;e -;w -;n -;s -" {
            : print "Type RESTART to play again." ;
            : done ;
         }
      }
   }

   ## TOWN 1 ## TOWN NORTH
   loc_town1 : location (loc_town1_desc) header="Town (North)[look]" graphic="loc_town1" {
      contains {
         mayor_house : scenery "mayor's house[examine mayor house]" {
            msg="It's a wooden house, quite large for just one person." 
            noun="house" adjective="mayor" experimental_matching_text_sequences=["mayor's house","mayors house"] listed="true" 
         }
      }
      on_pre_describe {
         : if (is_exists "mayor" && (learned_about_mystery || mystery_clues > 0)) {
            : destroy "mayor" ;
         }
      }
      on_describe {
         : if (!finished_intro && tutorial_is_on) {
            : tutorial "Type EXAMINE MAYOR or X MAYOR." ;
         }
         : if (finished_intro && (!has_visited "loc_town2" && !has_visited "loc_tower")) {
            : print "As soon as the mayor finishes his speech, the other kids speed off in their boats to find clues." ;
            : if (tutorial_is_on) {
               : tutorial "Type SOUTH or S to go south in search of clues." ;
            }
         }
      }
      on_command {
         : match "examine mayor" {
            : if (!finished_intro) {
               : print (emsg"mayor") ;
               : tutorial "Type LISTEN TO SPEECH to hear what the mayor has to say." ;
            }
         }
         : match "listen mayor;listen speech;talk mayor" {
            : if (!finished_intro) {
               : print "\"...as you know, the prize for finding the treasure is that you can make any request of me, the mayor! Terms and conditions apply, of course.\"" category="dark";
               : press_any_key ;
               : print "\"As for the rules...\"" category="dark";
               : add_choice "Listen to the rest." {
                  : print "The mayor takes a scrap of paper from his breast pocket and squints down at it." ;
                  : pause "1600" ;
                  : print "\"You may not take clues from other treasure hunters.\"" category="dark";
                  : pause "1600" ;
                  : print "\"You may not enter into any buildings.\"" category="dark";
                  : pause "1600" ;
                  : print "\"You may not spy on anyone. Especially me!\" the mayor laughs heartily." category="dark";
                  : pause "2000" ;
                  : print "\"Okay children, let the game begin! And may the best of you win!\"" category="dark";
                  : press_any_key ;
               }
               : add_choice "Let's go." ;
               : choose "Keep listening?" ;
               : set_true "finished_intro" ;
               : redescribe ;
            }
            : else {
               : gosub "talk_mayor" ;
               : done ;
            }
         }
         : match "w -;west -;s -;south -;go _;travel _" {
            : if (!finished_intro) {
               : print "You need to hear what they mayor says first." ;
               : done;
            }
            : else_if (tutorial_is_on && !has_visited "loc_town2" && verb_is "w") {
               : tutorial "Head south first, by typing SOUTH or S." ;
               : done ;
            }
         }
         : match "examine house;examine window;examine windows" {
            : if (mystery_clues > 0) {
               : print "You sneak up to the mayor's house and peek through the windows..." ;
               : press_any_key ;
               : print "There's nothing of note through the front windows, so you sneak around to the back..." ;
               : press_any_key ;
               : print "Nothing there either. But as you're sneaking back to your boat, you notice something sparkly on the ground." ;
               : create "ring" ;
               : increment "mystery_clues" ;
               : done ;
            }
         }
         : match "listen -;listen sounds" {
            : print "You can hear the gentle stirrings of the breeze, and the occasional bird. {!finished_intro ? `The mayor is giving a speech[listen to speech].`}" ;
            : done ;
         }
         : match "smell -;smell scents;smell air" {
            : print "The air smells like fish and river water." ;
            : done ;
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine houses" {
            : print "Most of the town residents lives in this area, but some people live further down the lake or in the forest." ;
            : done ;
         }
      }
   }

   ## TOWN 2 ## TOWN SOUTH
   loc_town2 : location (loc_town2_desc) header="Town (South)[look]" graphic = "loc_town2" {
      contains {
         boats : scenery "boats[examine boats]" msg="Much of the town is connected by water, so there are boats around for anyone who needs one." listed="true" ;
         bobber : scenery "bobber[examine bobber]" msg="It's a plastic sphere floating in the water, connected to a boat by a rope." listed="false" ;
      }
      on_pre_describe {
      }
      on_describe {
         : if (tutorial_is_on) {
            : if (!revealed_bobber) {
               : tutorial "Type EXAMINE BOATS or X BOATS to search the boats for clues." ;
            }
            : if (revealed_bobber && has_not_created "clue_1") {
               : tutorial "Type GET BOBBER to take the bobber out of the water." ;
            }
            : if (!has_not_created "clue_1" && holding_bobber) {
               : tutorial "Type DROP BOBBER to drop the bobber back into the water." ;
            }
            : if (!has_not_created "clue_1" && !holding_bobber) {
               : if (!has_checked_inventory) {
                  : tutorial "Type INVENTORY or I to see what you're carrying." ;
               }
               : else_if (!has_checked_clues) {
                  : tutorial "Type CLUES to read the clues you've collected so far." ;
               }
               : else_if (!has_typed_look) {
                  : tutorial "To clear the screen and refresh the location, type LOOK." ;
               }
               : else_if (!has_visited "loc_shops1") {
                  : tutorial "From this location, you can move north or south. Type South or S to move south." ;
               }
            }
         }
      }
      on_command {
         : match "examine boats" {
            :if (!revealed_bobber) {
               : print "You look at the boats and notice that one of them has a rope leading from it to a floating bobber." ;
               : set_true "revealed_bobber" ;
               : add_trait subject="bobber" trait="_listed" ;
               : if (tutorial_is_on) {
                  : press_any_key;
                  : redescribe ;
               }
               : done ;
            }
         }
         : match "get bobber" {
            : set_true "holding_bobber" ;
            : print "You reach into the water and pull out the bobber, which has a note attached. You read the note..." ;
            : if (has_not_created "clue_1") {
               : gosub "discover" ;
               : create "clue_1" target = "inventory" ;
            }
            : print (emsg "clue_1") ;
            : if (tutorial_is_on) {
               : press_any_key ;
               : redescribe ;
            }
            : done ;
         }
         : match "drop bobber" {
            : print "{holding_bobber ? `You drop the bobber back into the water.`:`You're not holding the bobber.`}" ;
            : set_false "holding_bobber" ;
            : if (tutorial_is_on) {
               : redescribe ;
            }
         }
         : match "n -;north -;s -;south -;go _;travel _" {
            : if (holding_bobber) {
               : print "You're holding onto the bobber, so your boat doesn't move." ;
               : done;
            }
         }
         : match "_ clues;clues -" {
            : gosub "view_clues" ;
            : set_true "has_checked_clues" ;
            : tutorial "From this location, you can move north or south. Type South or S to move south." ;
            : done ;
         }
         : match "listen -;listen sounds" {
            : print "Water is lapping against the boats in the river." ;
            : done ;
         }
         : match "smell -;smell scents;smell air" {
            : print "The air smells like fish and river water." ;
            : done ;
         }
         : match "examine water" {
            : print "The water flows slowly, allowing the boats[examine boat] to glide through the town easily." ;
            : done ;
         }
         : match "examine houses" {
            : print "There's nothing special about the houses." ;
            : done ;
         }
      }
   }

   ## SHOPS 1
   loc_shops1 : location (loc_shops1_desc) header="Shops[look]" graphic = "loc_shops1" {
      contains {
         news_stand : scenery "News Stand[examine news stand]" msg="There are stacks of newspapers, magazines, and books in the stand. Alba[examine alba] the shopkeeper smiles at you from inside." listed="true" noun="stand" adjective="news" ;
         food_shack : scenery "Food Shack[examine shack]" msg="^c^There's a sign that says:\n<Hotdogs, Pizza, Popcorn, and Candy Apples!\nAdd any one topping per item!<#015>>" listed="true" noun="shack" adjective="food" experimental_matching_text_sequences=["sammy's","sammy's shack","sammys"] ;
         alba: scenery "Alba[examine Alba]" msg="She has large round glasses that she pushes up on her nose every two minutes." listed="false" noun="alba" ;
         sammy : scenery "Sammy[examine Sammy]" msg="He has a round belly and rosey cheeks, and a mysterious glint in his eyes." noun="sammy" listed="false" ;
         newspaper_article : scenery "newspaper article[examine article]" {
            msg="There's an article about missing valuables. It says that many towspeople's valuables have mysteriously gone missing recently!" 
            cant_get_message="You don't need to take the newspaper with you." 
            listed="false" noun="article" adjective="article"
         }
      }
      on_describe {
         : if (!tutorial_is_finished && !has_not_created "clue_1" && has_checked_inventory && has_checked_clues && has_typed_look) {
            : set_true "tutorial_is_finished" ;
            : print "You have finished the tutorial. Type HELP if you need more help!" category="tutorial";
         }
      }
      on_command {
         : match "examine food;examine shack" {
            : print "Sammy[examine sammy] is busy grilling hotdogs. There's a sign on the counter that says:" ;
            : print "^c^<Hotdogs, Pizza, Popcorn, and Candy Apples!\nAdd any one topping per item!<#015>>" ;
            : done ;
         }
         : match "examine hotdogs;examine pizza;examine popcorn;examine apples" {
            : disambiguate_s1 "present" ;
            : if (s1() == "unknown") {
               : print "You're guessing you need to buy something in particular. Maybe a clue will tell you what." ;
               : done ;
            }
         }
         : match "get food;get hotdog;get popcorn;get apple;get pizza" {
            : if (has_not_created (s1())) {
               : print "You'll have to order that before you can take it." ;
               : done ;
            }
         }
         : match "buy food - -;order food - -" {
            : print "\"You can order hot dogs, pizza, popcorn, and candy apples! Add any one topping per item,\" says Sammy[examine sammy]." category="dark" ;
            : print "\"Try saying <^b^BUY PIZZA WITH SAUSAGE>, for example.\"" category="dark" ;
            : done ;
         }
         : match "buy _" {
            : gosub "buy_food" ;
         }
         : match "examine news;read news;get news;get article;examine article;read article" {
            : if (noun1_is "article") {
               : if (!verb_is "get" || (verb_is "get" && !learned_about_mystery)) {
                  : print (emsg"newspaper_article") ;
                  : set_true "learned_about_mystery" ;
                  : done ;
               }
            }
            : else_if (!learned_about_mystery) {
               : print "You look over the media in the news stand, and an article in today's newspaper catches your eye." ;
               : add_trait subject="newspaper_article" trait="_listed" ;
               : done ;
            }
            : else {
               : print "Perhaps you should ask some of the townspeople about the news article." ;
               : done ;
            }
         }
         : match "examine article;read article" {
            : print (emsg"newspaper_article") ;
            : set_true "learned_about_mystery" ;
            : done ;
         }
         : match "talk sammy;ask sammy" {
            : gosub "talk_sammy" ;
            : done ;
         }
         : match "talk alba;ask alba" {
            : gosub "talk_alba" ;
            : done ;
         }
         : match "give password;tell password;tell alba the password" {
            : if (clues_remain == 0) {
               : ask_string question="What's the password?" var="password" empty_is_ok="false" ;
               : if (lower(password) == "midsummer nights alive with magic" || lower(password) == "midsummer nights are alive with magic") {
                  : if (another_player_might_win >= 30) {
                     : print "\"You did it! Congratulations\" Alba says as she shakes your hand." category="dark" ;
                     : press_any_key ;
                     : print "\"But... I'm sorry to tell you this, dear, you didn't win. Someone else got the Golden Crown first.\"" category="dark" ;
                     : if (!achievement_lost_the_game) {
                        : pause "1600" ;
                        : gosub "achievement" ;
                        : print "^c^Lost the game" ;
                        : set_true "achievement_lost_the_game" ;
                     }
                     : press_any_key ;
                     : add_choice "Let's go." {
                        : print "Alba presents her arm to you as she steps out of the news stand." ;
                        : press_any_key ;
                        : goto "you_lose" ;
                        : redescribe ;
                     }
                     : add_choice "I'm not ready yet." {
                        : print "Type END GAME or CEREMONY when you're ready to end the game.";
                     }
                     : choose "\"Let's go to the ceremony, shall we?\"" ;
                  }
                  : else {
                     : print "\"You did it!\" Alba shrieks. \"You've won the treasure!\"" category="dark";
                     : success ;
                     : press_any_key ;
                     : print "Alba hands you the Golden Midsummer Crown and shakes your hand." ;
                     : print "\"When you're ready to start the ceremony, put the crown on,\" she instructs you." category="dark" ;
                     : press_any_key ;
                     : create "golden_crown" ;
                     : if (!achievement_won_the_game) {
                        : pause "1600" ;
                        : gosub "achievement" ;
                        : print "^c^Won the game" ;
                        : set_true "achievement_won_the_game" ;
                     }
                     : done ;
                  }
               }
               : else {
                  : print "\"Hmm... That's not quite it,\" says Alba." category="dark" ;
                  : failure ;
                  : done ;
               }
            }
            : else {
               : print "\"Sorry sweetheart, but you have to find all of the clues first.\"" category="dark" ;
               : done ;
            }
         }
      }
   }

   ## SHOPS 2
   loc_shops2 : location (loc_shops2_desc) header="Flower Shop[look]" graphic = "loc_shops2" {
      contains {
         flower_shop : scenery "flower shop[examine flower shop]" msg="It's your grandma's flower shop! You've spent many days sitting here with her, selling flowers." listed="true" noun="shop" adjective="flower" ;
         grandma : scenery "Grandma[examine grandma]" msg="Her long white hair is in a braid down her back. She's wearing overalls, a straw hat adorned with flowers, and rainboots." listed="true" noun="grandma" ;
      }
      on_pre_describe {
      }
      on_describe {
      }
      on_command {
         : match "buy flower;buy flowers;get flower;get flowers;buy pansies;get pansies" {
            : if (has_not_created "pansies") {
               : print "Your grandma pulls you into a tight hug and kisses you on the head before presenting you with a small bunch of pansies, your favorite flower." ;
               : print "\"Love you dear!\" she says while patting you on the head." category="dark" ;
               : create "pansies" ;
               : done ;
            }
            : else_if (is_beside "pansies") {
               : set_sentence "get pansies" ;
            }
            : else {
               : print "You should save them for the customers." ;
               : done ;
            }
         }
         : match "talk grandma;talk florist;ask grandma" {
            : gosub "talk_grandma" ;
            : done ;
         }
         : match "examine flowers" {
            : print "Your grandma has a magnificent garden full of the flowers she grows for her shop. You've been helping her tend to them for years." ;
            : done ;
         }
         : match "smell flowers" {
            : print "You breathe in the fragrance of the flowers. It gives you a happy, cozy feeling." ;
            : done ;
         }
         : match "listen _;hear _" {
            : print "You can hear the sounds of the circus in the distance." ;
            : done ;
         }
      }
   }

   ## CIRCUS 1
   loc_circus1 : location (loc_circus1_desc) header="Circus Entrance[look]" graphic = "loc_circus1" {
      contains {
         ticket_booth : scenery "booth[examine booth]" msg="A thin man in a black-and-white striped suit is selling circus tickets[examine tickets] and <cotton candy>[examine candy]." listed="true" noun="booth" adjective="ticket" experimental_matching_text_sequences=["cotton candy booth","candy booth"];
      }
      on_command {
         : if (has_not_created "cotton_candy") {
            : match "examine candy" {
               : print "You can practically taste the pink spun sugar. Perhaps you should buy some?" ;
               : done ;
            }
            : match "buy candy;get candy" {
               : print "\"Hello sir,\" you say as you step up to the booth. \"May I have some cotton candy please?\"" ;
               : print "The man holds out a bag of cotton candy to you. \"Make sure you eat it right away!\" he says with a grin." category="dark" ;
               : create "cotton_candy" ;
               : done ;
            }
         }
         : match "buy candy" {
            : print "\"Sorry kid, one per customer,\" says the man in the striped suit." category="dark";
            : done ;
         }
         : match "buy ticket;buy tickets;get ticket;get tickets" {
            : print "\"The circus is free on Midsummer's Eve!\" the ticket seller explains." category="dark" ;
            : print "\"I'm just doing security.\" he smiles." category="dark" ;
            : done ;
         }
         : match "talk man;talk seller;talk attendant;ask man" {
            : print "The man waves at you, then ignores you." ;
            : done ;
         }
         : match "examine man;examine attendant" {
            : print "He's busy watching the people milling around." ;
            : done ;
         }
         : match "examine circus;examine arena" {
            : print "You can the lights and decorations of the circus. It looks fun!" ;
            : done ;
         }
      }
   }

   ## CIRCUS 2
   loc_circus2 : location (loc_circus2_desc) header="Circus Arena[look]" graphic = "loc_circus2" {
      contains {
         circus_tent : scenery "circus tent[examine circus tent]" msg="A dazzling purple tent with golden lights and a flag at the top. You can hear cheering and trumpeting coming from inside." ;
         ferris_wheel : scenery "ferris wheel[examine ferris wheel]" msg="A series of baskets slowly rotates in a circle through the sky. You can see several children in the baskets, smiling and kicking their feet." listed="true" noun="wheel" adjective="ferris";
         games : scenery "games[examine games]" msg="You love the circus games. You win all five of the prizes every year!" noun="games" listed="true" ;
         puppet_show : scenery "puppet show[examine puppet show]" msg="They're performing \"The Frog Prince,\" but you don't have time to watch it." noun="show" adjective="puppet" listed="true" ;
      }
      on_command {
         : match "examine game;examine games;play game;play games" {
            : gosub "play_games" ;
         }
         : match "enter tent;go _ _ tent" {
            : print "The treasure hunt rules say \"do not enter any buildings.\" You'll have to enjoy the outdoor activities." ;
            : done ;
         }
         : match "ride -" {
            : print "You'll need to say what you want to ride." ;
            : done ;
         }
         : match "get wheel" {
            : print "Try saying RIDE THE WHEEL." ;
            : done ;
         }
         : match "ride wheel;enter wheel;board wheel;go wheel;sit wheel" {
            : print "You step up to the Ferris wheel, and the attendant winks at you. A few minutes later, the ride stops and the attendant leads you to a basket." ;
            : press_any_key ;
            : goto "loc_ferriswheel" ;
            : done ;
         }
         : match "examine show;watch show;examine puppets;watch puppets" {
            : if (!mayor_at_puppets) {
               : print "The puppet show is performing \"The Frog Prince.\" As you walk toward it, you notice something strange in the darkness near the trees..." ;
               : press_any_key ;
               : print "Is that the mayor[examine mayor] creeping around in the dark?" ;
               : set_true "mayor_at_puppets" ;
               : increment "mystery_clues" ;
               : done ;
            }
            : else {
               : print (emsg"puppet_show") ;
               : done ;
            }
         }
         : match "examine mayor;examine dark;follow mayor;spy mayor;investigate mayor" {
            : if (mayor_at_puppets && has_not_created "necklace") {
               : print "You walk over to where you saw the mayor sneaking around." ;
               : press_any_key ;
               : print "You don't see the mayor anywhere, but you do see something shiny hidden underneath a tree..." ;
               : create "necklace" ;
               : done ;
            }
            :else {
               : print "You don't see the mayor anywhere." ;
               : done ;
            }
         }
         : match "examine necklace;get necklace" {
            : if (!has_taken "necklace") {
               : print "You pick up the shiny object. It's a necklace! Did the mayor hide it under a tree? Why would he do that?" ;
               : create "necklace" target="inventory" ;
            }
         }
         : match "examine crowd" {
            : print "You recognize some faces, but many of the circus attendees are from out of town. They look happy and excited." ;
            : done ;
         }
         : match "examine lights;examine decorations" {
            : print "You love how the lights of the circus light up the night. It feels like you could stay at the circus all night and not get tired." ;
            : done ;
         }
      }
   }
   ## MAGIC NUMBER
   loc_number : location header="Magic Number[look]" graphic="loc_circus2" {
      on_describe {
         : print "A beautiful and dazzling mathematician heads your way.";
         : print "\"Guess the magic number in six tries, and win a prize!\" she says with a smile." category="dark" ;
         : gosub "play_magic_number" ;
      }
   }

   ## WHEEL OF FORTUNE
   loc_fortune : location (loc_fortune_desc) header="Wheel of Fortune[look]" graphic="loc_fortune" {
      contains {
      }
      on_describe {
         : if (!saw_fortune_intro) {
            : print "<In this game, you can use your points to bet on red or blue, then spin the wheel.\nIf you get to 500 points, you win!<#000>>" ;
            : press_any_key ;
            : set_true "saw_fortune_intro" ;
            : redescribe ;
         }
         : else {
            : if (!stop_playing_fortune) {
               : gosub "play_fortune" ;
            }
            : if (stop_playing_fortune) {
               : add_choice "Let's play!" {
                  : gosub "play_fortune" ;
               }
               : add_choice "No thanks." {
                  : goto "loc_circus2" ;
                  : redescribe ;
               }
               : choose "Would you like to play again?" ;
            }
         }
      }
      on_command {
      }
   }
   ## DARTS ## DARTBOARD
   loc_darts : location (loc_darts_desc) header="Game of Darts[look]" graphic="loc_darts" layout="SB +G D O" {
      contains {
         dart_board : scenery "dart board[examine dart board]" msg="It's a typical dart board, with zones of different colors, and a bullseye in the middle." noun="board" adjective="dart" listed="false";
         red_dart : scenery "red dart[examine red dart]" msg="The <red<#a10>> dart is {red_dart_desc}." noun="dart" adjective="red" listed="false" traits=[t_hand];
         blue_dart : scenery "blue dart[examine blue dart]" msg="The <blue<#8bf>> dart is {blue_dart_desc}." noun="dart" adjective="blue" listed="false" traits=[t_hand];
         yellow_dart : scenery "yellow dart[examine yellow dart]" msg="The <yellow<#ff0>> dart is {yellow_dart_desc}." noun="dart" adjective="yellow" listed="false" traits=[t_hand];
         green_zone : scenery "green zone" noun="zone" adjective="green" listed="false" ;
         white_zone : scenery "white zone" noun="zone" adjective="white" listed="false" ;
         black_zone : scenery "green zone" noun="zone" adjective="black" listed="false" ;
         red_zone : scenery "green zone" noun="zone" adjective="red" listed="false" ;
      }
      on_pre_describe {
         : if (darts == 0) {
            : set_false "playing_darts" ;
            : set_integer var="darts"  value="3" ;
            : set_true "get_prize" ;
            : if (has_trait {subject="red_dart" trait="t_white"} && has_trait {subject="blue_dart" trait="t_green"} && has_trait {subject="yellow_dart" trait="t_black"}) {
               : create "plush_toy" target="loc_darts";
            }
            : else {
               : gosub "get_circus_prize" ;
            }
         }
         : else_if (darts == 3 && get_prize) {
            : set_false "get_prize" ;
            : iterate "_beside" {
               : add_trait subject -> (item()) trait="t_hand" ;
               : remove_trait subject -> (item()) trait="t_black" ;
               : remove_trait subject -> (item()) trait="t_white" ;
               : remove_trait subject -> (item()) trait="t_green" ;
               : remove_trait subject -> (item()) trait="t_red" ;
               : remove_trait subject -> (item()) trait="t_bullseye" ;
            }
         }
      }
      on_describe {
         : if (is_beside "plush_toy" && !has_taken "plush_toy") {
               : print "\"This score calls for a very <^i^special> prize! Congratulations, kid!\" the attendant says, offering you a cute ladybug plush toy." category="dark" ;
               : success ;
               : done ;
         }
         : if (playing_darts || get_prize) {
            : exits ;
            : if (get_prize) {
               : print "\"Wow, you certainly know how to throw a dart!\" The attendant says while handing you a prize." category="dark" ;
               : success ;
               : done ;
            }
         }
         : else {
            :add_choice "Let's play!" {
               : print "The attendant hands you the darts." ;
               : pause "1000" ;
               : set_true "playing_darts" ;
            }
            : add_choice "Not yet." {
               : print "The attendant nods, and you step away from the game." ;
               : pause "1000" ;
               : goto "loc_circus2" ;
            }
            : choose "<\"Are you ready to play the game?\" asks the attendant.<#015>>" ;
            : redescribe ;
         }
      }
      on_command {
         : match "get *" {
            : if (subject1_is "plush_toy") {
               : print "You pick up the plush toy, wondering if there's something special about it as you head back to the circus." ;
               : press_any_key ;
               : goto "loc_circus2" ;
               : if (is_exists "plush_toy" && !has_taken "plush_toy") {
                  : create "plush_toy" target="inventory" ;
               }
               : redescribe ;
            }
            : print ("You pick up the "+d(s1())+".") ;
            : get object -> (s1()) quiet="true" ;
            : pause "1200" ;
            : redescribe ;
         }
         : match "exit _;leave _;go back;finish _;done _" {
            : if (is_beside "plush_toy") {
               : print "You take the plush toy with you." ;
               : pause "1200" ;
            }
            : print "The attendant nods, and you step away from the game." ;
            : pause "1000" ;
            : goto "loc_circus2" ;
            : if (is_exists "plush_toy" && !has_taken "plush_toy") {
               : create "plush_toy" target="inventory" ;
            }
            : redescribe ;
         }
         : match "restart _;start over" {
            : set_false "playing_darts" ;
            : set_integer var="darts"  value="3" ;
            : set_true "get_prize" ;
            : redescribe ;
         }
         : match "examine zone;examine zones" {
            : print "Type THROW RED DART AT BLACK ZONE to aim the red dart at the black zone." ;
            : done ;
         }
         : if (playing_darts) {
            : match "_ hint;_ help;help _;how *;ask *" {
               : print "Type THROW DART to throw a dart.\nType THROW RED DART to throw the red dart.\nType THROW RED DART AT BLACK ZONE to aim the red dart at the black zone." ;
               : done ;
            }
            : match "throw _" {
               : if (!noun1_is "dart" && !noun2_is "dart") {
                  : print "Try throwing a DART at one of the ZONES." ;
                  : done ;
               }
            }
            : match "throw dart" {
               : if (adjective1_is "") {
                  : if (has_trait {subject="red_dart" trait="t_hand"}) {
                     : set_subject1 "red_dart" ;
                  }
                  : else_if (has_trait {subject="blue_dart" trait="t_hand"}) {
                     : set_subject1 "blue_dart" ;
                  }
                  : else {
                     : set_subject1 "yellow_dart" ;
                  }
               }
               : if (s1_has_trait "t_hand") {
                     : if (adjective2_is "" || adjective2_is "bullseye") {
                        : print ("You throw the "+d(s1())+" at the dartboard and it hits the bullseye!") ;
                        : pause "1200" ;
                        : add_trait subject -> (s1()) trait="t_bullseye" ;
                        : remove_trait subject -> (s1()) trait="t_hand" ;
                        : decrement "darts" ;
                        : redescribe ;
                        : done ; 
                     }
                     : else_if (adjective2_is "white" || adjective2_is "black" || adjective2_is "green" || adjective2_is "red") {
                        : print ("You throw the "+d(s1())+" at the dartboard and it lands in a "+original"adjective2"+" zone.") ;
                        : pause "1200" ;
                        : if (adjective2_is "white") {
                           : add_trait subject -> (s1()) trait="t_white" ;
                        }
                        : else_if (adjective2_is "black") {
                           : add_trait subject -> (s1()) trait="t_black" ;
                        }
                        : else_if (adjective2_is "green") {
                           : add_trait subject -> (s1()) trait="t_green" ;
                        }
                        : else {
                           : add_trait subject -> (s1()) trait="t_red" ;
                        }
                        : remove_trait subject -> (s1()) trait="t_hand" ;
                        : decrement "darts" ;
                        : redescribe ;
                        : done ; 
                     }
                     : else {
                        : print "You throw a dart and miss the dartboard. You pick it back up." ;
                        : done ;
                     }
               }
               : else {
                  : print ("There is no "+original"adjective1"+" dart to throw.") ;
                  : done ;
               }
            }
         }
      }
   }
   loc_darts_exit : location ;

   ## FERRIS WHEEL
   loc_ferriswheel : location (loc_ferriswheel_desc) header="Circus Arena[look]" graphic = "loc_circus2" {
      contains {
         ferris_wheel2 : scenery "ferris wheel[examine wheel]" msg="Lights cover the Ferris wheel, which slowly rotates through the sky. You are tucked safely inside a basket[examine basket]." listed="true" noun="wheel" adjective="ferris";
         basket : scenery "basket[examine basket]" msg="You're on the Ferris wheel. Your basket swings gently back and forth as you ride up to the top, then back down." listed="true" noun="basket";
         circus : scenery "circus[examine circus]" msg="The Midsummer Circus is the highlight of the summer. Everyone loves the food, the games, and the circus acts." listed="true" noun="circus";
      }
      on_command {
         : match "disembark wheel;get off;exit wheel;deboard wheel;exit -" {
            : print "You wave to the attendant, and a few minutes later the ride stops. You exit from your basket." ;
            : press_any_key ;
            : goto "loc_circus2" ;
            : done ;
         }
         : match "examine basket" {
            : if (has_not_created "clue_4") {
               : print "You look around the basket and notice that a note has been attached to the safety bar..." ;
               : gosub "discover" ;
               : create "clue_4" target = "inventory" ;
               : print (emsg "clue_4") ;
               : done ;
            }
         }
         : if (!has_not_created "clue_4") {
            : match "examine bar;examine note" {
               : print (emsg "clue_4") ;
               : done ;
            }
         }
      }
   }
   loc_ferriswheel_exit : location ;

   ## RIVER 1
   loc_river1 : location (loc_river1_desc) header="River[look]" graphic = "loc_river1" {
      on_command {
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine houses;examine tree;examine rocks;examine bank" {
            : print "You don't notice anything special." ;
            : done ;
         }
      }
   }

   ## RIVER 2
   loc_river2 : location (loc_river2_desc) header="River[look]" graphic = "loc_river2" {
      contains {
         dog : scenery "Buddy the dog[examine dog]" msg="Buddy is a good dog, and well-trained. {fed_the_dog ? `He's sitting down and wagging his tail.`:`He seems to be hungry.`}" cant_get_message="You can't take him with you." noun="dog" experimental_matching_text_sequences=["buddy the dog","buddy"] listed="true" ;
         oak_tree : scenery "oak tree[examine tree]" msg="You've been climbing this huge oak tree since you could walk." noun="tree" adjective="oak" listed="true" ;
         note2 : scenery "note[examine note]" listed="false" ;
      }
      on_command {
         : match "examine tree" {
            : if (!has_trait {subject="note2" trait="_listed"}) {
               : print "You notice a small note attached to the tree." ;
               : add_trait subject="note2" trait="_listed" ;
            }
         }
         : match "examine note;get note" {
            : if (fed_the_dog) {
               : print "You read the note pinned to the tree..." ;
               : if (has_not_created "clue_7") {
                  : gosub "discover" ;
                  : create "clue_7" target = "inventory" ;
               }
               : print (emsg "clue_7") ;
               : done ;
            }
            : else {
               : print "Buddy seems to be guarding the note. He won't let you near it." ;
               : done ;
            }
         }
         : match "feed dog - -;give food - -" {
            : if (noun2_is "") {
               : print "You're not sure what to give to the dog." ;
               : done ;
            }
         }
         : match "give dog _ hotdog;feed dog _ hotdog" {
            : set_sentence "give hotdog to dog" ;
         }
         : match "give hotdog to dog;give hotdog;feed hotdog" {
            : if (is_carried "hotdog") {
               : if (has_trait {subject="hotdog" trait="t_pickles"}) {
                  : print "You toss the hotdog to Buddy. He sniffs it, then swallows it whole and wags his tail." ;
                  : press_any_key ;
                  : print "Buddy moves to the side, allowing you to get closer to the tree." ;
                  : success ;
                  : press_any_key ;
                  : set_true "fed_the_dog" ;
                  : destroy "hotdog" ;
                  : redescribe ;
               }
               : else {
                  : print "You toss the hotdog to Buddy. He sniffs it, then ignores it. He must want a different topping." ;
                  : failure ;
                  : destroy "hotdog" ;
               }
            }
         }
         : match "pet dog;pet buddy" {
            : if (fed_the_dog) {
               : print "You pat Buddy on the head. \"Good dog, Buddy.\" He wags his tail and licks your hand." ;
            }
            : else {
               : print "Buddy jumps up a bit and pushes your hand away with his paws." ;
            }
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine houses;examine tree;examine rocks;examine bank" {
            : print "You don't notice anything special." ;
            : done ;
         }
      }
   }

   ## BRIDGE
   loc_bridge : location (loc_bridge_desc) header="Bridge[look]" graphic="loc_bridge" {
      contains {
         bridge : scenery "bridge[examine bridge]" msg="The stone bridge crosses a narrow section of the river. A fishing pole leans against it." noun="bridge" listed="true" ;
         fishing_pole : scenery "fishing pole[examine pole]" msg="It's a simple fishing pole with line and a hook[examine hook].{baited_with_popcorn ? ` There's a piece of lime popcorn on the hook.`}" noun="pole" adjective="fishing" listed="false" cant_get_message="You can't take it with you; the other treasure hunters might need it." ;
         fish : scenery "fish[examine fish]" msg="There are several fish darting around in the bridge's shadow." cant_get_message="None of these fish are worth taking." listed="false" noun="fish" ;
      }
      on_command {
         : match "examine bridge" {
            : if (!has_trait {subject="fishing_pole" trait="_listed"}) {
               : print (emsg"bridge") ;
               : add_trait subject="fishing_pole" trait="_listed" ;
            }
         }
         : match "examine hook" {
            : print "It's very sharp, you could probably hook anything to it as bait[examine bait]." ;
            : done ;
         }
         : match "examine bait" {
            : print "You don't see any worms around here, but maybe the fish like some other kind of food." ;
            : done ;
         }
         : if (!has_not_created "clue_11") {
            : match "fish _;bait _;hook _;_ fishing; use _ as bait;put _ on hook;attach _ to hook;cast _" {
               : print "You probably don't need to do any more fishing today." ;
               : done ;
            }
         }
         : match "fish -;go fishing;cast line;use pole;cast pole;bait hook - -;attach bait - -;use bait - -;put bait on hook;attach bait to hook" {
            : print "You'll need to choose something to use as bait." ;
            : done ;
         }
         : match "bait hook with _" {
            : set_sentence "attach $2 to hook" ;
         }
         : match "use _ as bait" {
            : set_sentence "attach $1 to hook" ;
         }
         : match "_ fish _ popcorn;_ bait _ popcorn;use popcorn with lime;attach popcorn with lime;go fishing with popcorn" {
            : set_sentence "attach popcorn to hook" ;
         }
         : match "put _ on hook;attach _ to hook" {
            : disambiguate_s1 "present" ;
            : if (s1() == "unknown") {
               : print "You don't have that." ;
               : done ;
            }
            : print ("You attach the "+(d(s1()))+" to the hook and cast your line.") ;
            : pause "1000" ;
            : print "..." ;
            : pause "1000" ;
            : print "..." ;
            : pause "1000" ;
            : print "..." ;
            : pause "1000" ;
            : if (noun1_is "popcorn" && is_present "popcorn" && has_trait {subject="popcorn" trait="t_lime"}) {
               : print "You've got a bite! You quickly reel it in, and discover a rubber fish with a note in its mouth..." ;
               : success ;
               : if (has_not_created "clue_11") {
                  : gosub "discover" ;
                  : create "clue_11" target = "inventory" ;
               }
               : print (emsg "clue_11") ;
               : pause "1600" ;
               : print "You toss the fish back into the water." ;
               : done ;
            }
            : else {
               : print ("Nothing bites. You reel the line back in and unhook the "+(d(s1()))+".") ;
               : failure ;
            }
            : done ;
         }
         : match "examine water" {
            : print "This is a great fishing spot." ;
            : done ;
         }
         : match "examine house;examine trees;examine rocks;examine bank" {
            : print "You don't notice anything special." ;
            : done ;
         }
      }
   }

   ## ENCHANTED 1
   loc_enchanted1 : location (loc_enchanted1_desc) header="River[look]" graphic = "loc_enchanted1" {
      contains {
      }
      on_command {
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine houses;examine tree;examine rocks;examine bank" {
            : print "You don't notice anything special." ;
            : done ;
         }
      }
   }

   ## WITCH
   loc_witch : location (loc_witch_desc) header="Witch's Hut[look]" graphic = "loc_witch" {
      contains {
         cauldron : scenery "cauldron[examine cauldron]" msg="{cauldron_desc}" listed="true" noun="cauldron" ;
         witch_hut : scenery "witch's hut[examine witch hut]" {
            msg="The witch's hut has an orange roof and a bright orange glow coming through the windows. <Edwina the Witch>[examine witch] is standing outside, cackling." 
            listed="true" noun="hut" adjective="witch" experimental_matching_text_sequences=["witch's hut"]
         }
         witch : scenery "witch[examine witch]" {
            msg="Edwina the witch has a long warty nose and a rat's nest of grey hair." 
            noun="witch" listed="true"
         }
      }
      on_describe {
         : if (xyzzy) {
            : print "The witch looks up at your sudden arrival and cackles." ;
            : print "\"I see we have a little witch on our hands,\" she says with a wicked smile." category="dark" ;
            : set_false "xyzzy" ;
         }
      }
      on_command {
         : match "talk witch;ask witch" {
            : if (is_present "purple_potion") {
               : print "\"Very well done, child. You got the potion just right.\" The witch nods approvingly, with a twinkle in her eye." category="dark" ;
            }
            : gosub "talk_witch" ;
            : done ;
         }
         : match "give apple;offer apple;give witch the apple" {
            : if (is_carried "candy_apple") {
               : print "You give the {apple_name} to the witch." ;
               : press_any_key ;
               : print "The witch is so surprised, she doesn't know what to say. \"That's very kind of you!\" she says." category="dark" ;
               : if (!achievement_gave_witch_apple) {
                  : pause "1600" ;
                  : gosub "achievement" ;
                  : print "^c^Witches love candy apples" ;
                  : set_true "achievement_gave_witch_apple" ;
               }
               : pause "1200" ;
               : print "The witch takes a bite of the apple, smiles, then puts the rest in her pocket." ;
               : done ;
            }
         }
         : match "give potion;give witch the potion;give potion to witch;trade potion;trade witch" {
            : if (!has_not_created "frog") {
               : print "\"Be gone with you, child, I've given you the frog already." ;
               : done ;
            }
            : if ((noun1_is "potion" || noun2_is "potion") && is_present "purple_potion") {
               : print "You offer the purple potion to the witch." ;
               : press_any_key ;
               : print "\"Oooh,\" the witch claps her hands with delight, \"what a lovely potion. In exchange, I bestow this frog.\"" category="dark" ;
               : success ;
               : create "frog" ;
               : destroy "purple_potion" ;
               : done ;
            }
         }
         : match "make potion;brew potion;make recipe;follow recipe;use cauldron" {
            : print "<To brew a potion, you'll need to add three ingredients to the cauldron.<#fff>>" ;
            : done ;
         }
         : match "drop _ in cauldron" {
            : set_sentence "add $1" ;
         }
         : match "add _;put _" {
            : if (noun2_is "cauldron" || s1_has_trait "t_ingredient" || (verb_is "add" && noun2_is "")) {
               : gosub "cauldron_addition" ;
               : done ;
            }
            : disambiguate_s1 "present" ;
            : if (s1() == "unknown") {
                  : if (s1() == "unknown") {
                     : print "You don't have one of those!" ;
                     : done ;
                  }
            }
         }
         : match "remove ingredients;empty cauldron" {
            : set_integer var="cauldron_ingredients" value = "0" ;
            : iterate "t_in_cauldron" {
               : remove_trait subject -> (item()) trait = "t_in_cauldron" ;
               : create entity -> (item()) target="inventory";
            }
            : print "You remove everything from the cauldron." ;
            : done ;
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
      }
   }
   # Items that are placed "in the cauldron" go to the in_the_cauldron location.
   in_the_cauldron : location ;

   ## GRAVEYARD
   loc_graveyard : location (loc_graveyard_desc) header="Graveyard[look]" graphic = "loc_graveyard" {
      contains {
         headstones : scenery "headstones[examine headstones]" listed="true" ;
         free_headstone : scenery "free headstone" {
            msg="^n^<^b^First stone:<#000>> <Mary Mildred Macbeth, 1804-1843<#000>>\n<She is now Free with the Angels<#015>>^m^" 
            noun="headstone" adjective="free" listed="false"
         }
         blessed_headstone : scenery "blessed headstone" {
            msg="^n^<^b^Third stone:<#000>> <Edward Grover Whitaker, 1821-1829<#000>>\n<Blessed for eternity, Forever our perfect son<#015>>^m^" 
            noun="headstone" adjective="blessed" listed="false"
         }
         loved_headstone : scenery "loved headstone" {
            msg="^n^<^b^Sixth stone:<#000>> <Sophia Louise Montgomery, 1836-1856<#000>>\n<Loved by all, her memory will shine Forever<#015>>^m^" 
            noun="headstone" adjective="loved" listed="false"
         }
      }
      on_command {
         : match "examine graveyard;examine cemetery" {
            : print "The town doesn't use this graveyard. It belonged to a neighboring town, which is now abandoned." ;
            : done ;
         }
         : match "examine headstones;read headstones" {
            : if (adjective1_is "") {
               : print "You can make out the words on six of the headstones." ;
               : gosub "read_headstones" ;
               : done ;
            }
         }
         : match "knock _" {
            : if (adjective1_is "" && noun1_is "headstone" && noun2_is "") {
               : print "You'll have to specify which headstone you're knocking on." ;
               : done ;
            }
            : else_if (adjective1_is "third" || noun1_is "third" || adjective1_is "3rd" || noun2_is "3") {
               : print "You knock on the headstone of the Blessed." ;
               : increment "knocks" ;
               : set_true "knocked_on_blessed" ;
            }
            : else_if (adjective1_is "first" || noun1_is "first" || adjective1_is "1st" || noun2_is "1") {
               : print "You knock on the headstone of the Free." ;
               : increment "knocks" ;
               : set_true "knocked_on_free" ;
            }
            : else_if (adjective1_is "sixth" || noun1_is "sixth" || adjective1_is "6th" || noun2_is "6") {
               : print "You knock on the headstone of the Loved." ;
               : increment "knocks" ;
               : set_true "knocked_on_loved" ;
            }
            : else {
               : print "You knock on a headstone." ;
               : increment "knocks" ;
            }
            : print "{knocks}" ;
            : if (knocks >= 3) {
               : if (knocked_on_blessed && knocked_on_free && knocked_on_loved) {
                  : print "Glowing script appears on the headstones..." ;
                  : if (has_not_created "clue_10") {
                     : gosub "discover" ;
                     : create "clue_10" target = "inventory" ;
                  }
                  : print (emsg "clue_10") ;
               }
               : else {
                  : print "Hmm... That didn't seem to work." ;
                  : failure ;
               }
               : set_integer var="knocks" value="0" ;
            }
         }
      }
   }

   ## MUSHROOMS 1
   loc_mushrooms1 : location (loc_mushrooms1_desc) header="Mushroom Forest[look]" graphic = "loc_mushrooms1" {
      contains {
         tree_house : scenery "treehouse[examine treehouse]" {
            msg="It's a small house inside a huge tree. You suspect it might be magic." ;
            noun="house" adjective="tree" experimental_matching_text_sequences=["treehouse"] listed="true" 
         }
         grumpy_man : scenery "grumpy little man[examine grumpy man]" {
            msg="He has pointed ears, a pointed beard, and long grey eyebrows. His green tunic is embroidered with silver flowers. He scowls at you while leaning on his cane." ;
            noun="man" adjective="grumpy" experimental_matching_text_sequences=["grumpy little man","little man","grumpy fairy"] 
            listed="false" 
         }
         mushrooms : scenery "mushrooms" msg="There are orange and purple mushrooms everywhere. Some of them are as tall as trees!" listed="true" ;
      }
      on_tick {
         : if (linger() >= 2) {
            : if (!has_trait {subject="grumpy_man" trait="_listed"}) {
               : print "A grumpy little man comes out of the treehouse and waves his cane at you." ;
               : print "\"Now look here youngin', you stay away from these mushrooms ya hear? I've had it with you youngin's scramblin' up and down these beauties - it's a disgrace!\"" category="dark" ;
               : add_trait subject="grumpy_man" trait="_listed" ;
            }
         }
      }
      on_command {
         : if (!has_trait {subject="grumpy_man" trait="_listed"}) {
            : match "examine treehouse;examine tree;examine house;examine man;knock house;knock door;talk man" {
               : if (verb_is "knock") {
                  : print "As you walk toward the house, a grumpy little man opens the door and waves his cane at you." ;
               }
               : else {
                  : print "As you look at the treehouse, a grumpy little man opens the door and waves his cane at you." ;
               }
               : print "\"Now look here youngin', you stay away from these mushrooms ya hear? I've had it with you youngin's scramblin' up and down these beauties - it's a disgrace!\"" category="dark" ;
               : add_trait subject="grumpy_man" trait="_listed" ;
               : done ;
            }
            : match "examine man" {
               : print "The grumpy little man is in his house right now." ;
               : done ;
            }
         }
         : if (has_trait {subject="grumpy_man" trait="_listed"}) {
            : match "climb mushrooms;get mushrooms;get bolete;get webcap" {
               : print "The grumpy little man waves his cane at you." ;
               : print "\"Don't you even think about it, youngin'!\" he warns you." category="dark";
               : done ;
            }
            : match "talk man;ask man" {
               : gosub "talk_man" ;
               : done ;
            }
         }
         : match "climb mushrooms" {
            : print "You're too scared of the grumpy little man to climb these mushrooms." ;
            : done ;
         }
         : match "examine mushrooms" {
            : print (emsg"mushrooms") ;
            : if (has_not_created "bolete") {
               : print "You notice some webcaps and boletes growing near you." ;
               : create "webcap" ;
               : create "bolete" ;
            }
         }
         : match "open door;enter house;enter -" {
            : print "No way!" ;
            : done ;
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
      }
   }

   ## MUSHROOMS 2
   loc_mushrooms2 : location (loc_mushrooms2_desc) header="Mushroom Forest[look]" graphic = "loc_mushrooms2" {
      contains {
         tall_mushroom : scenery "tall mushroom[examine tall mushroom]" {
            msg="The sturdy-looking mushroom has an orange cap and comes up to your shoulders." ;
            noun="mushroom" adjective="tall" listed="true" 
         }
         gigantic_mushroom : scenery "gigantic mushroom[examine gigantic mushroom]" {
            msg="The mushroom is huge, taller than you by half, and looks as sturdy as a full-grown tree." ;
            noun="mushroom" adjective="gigantic" listed="true" 
         }
         mushroom_spores : scenery "mushroom spores[examine mushroom spores]" {
            msg="The air is so thick with spores, it looks hazy. Good thing you don't have mushroom allergies." ;
            noun="spores" adjective="mushroom" listed="false" 
         }
      }
      on_pre_describe {
      }
      on_describe {
      }
      on_command {
         : match "climb mushroom;climb up;climb -;climb tall;climb gigantic" {
            : if (adjective1_is "tall" || noun1_is "tall") {
               : print "You climb on top of the tall mushroom." ;
               : success ;
               : set_true "on_tall_mushroom" ;
            }
            : else_if (adjective1_is "gigantic" || noun1_is "gigantic") {
               : if (on_tall_mushroom) {
                  : print "You reach up to the gigantic mushroom cap and slowly pull yourself onto it." ;
                  : success ;
                  : set_true "on_gigantic_mushroom" ;
                  : set_false "on_tall_mushroom" ;
               }
               : else {
                  : print "You jump as high as you can, but you can't reach the gigantic mushroom cap." ;
               }
            }
            : else {
               : print "You'll have to specify which mushroom you want to climb." ;
            }
            : done ;
         }
         : match "examine mushroom;look down;examine cap;examine top" {
            : if (on_gigantic_mushroom) {
               : print "You examine the top of the gigantic mushroom..." ;
               : if (has_not_created "clue_5") {
                  : gosub "discover" ;
                  : create "clue_5" target = "inventory" ;
               }
               : print (emsg "clue_5") ;
               : done ;
            }
            : else_if (noun1_is "cap" || noun2_is "cap" || noun1_is "top" || noun2_is "top" ) {
               : print "You can't see the top of the mushroom from here." ;
               : done ;
            }
         }
         : match "* down;jump *" {
            : print "You jump {on_tall_mushroom ? `off the tall mushroom and land with a thud on`:`from the gigantic mushroom back onto the tall mushroom, then onto`} the ground." ;
            : set_false "on_tall_mushroom" ;
            : set_false "on_gigantic_mushroom" ;
            : done ;
         }
         : match "e -;east -;w -;west -;go _;travel _" {
            : mask {
               : if (on_tall_mushroom || on_gigantic_mushroom) {
                  : print "You jump down off the {on_tall_mushroom ? `tall mushroom`:`gigantic mushroom`} - oof!" ;
                  : pause "1600" ;
                  : set_false "on_tall_mushroom" ;
                  : set_false "on_gigantic_mushroom" ;
               }
            }
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
      }
   }

   ## FAIRY
   loc_fairy : location (loc_fairy_desc) header="Fairy Cottage[look]" graphic = "loc_fairy" {
      contains {
         fairy : scenery "fairy[examine fairy]" noun="fairy" {
            msg="She's a sprite-like fairy with a cascade of wildy curly hair and a leafy dress. Her bright green eyes glow in the evening light."
            listed="true"
         }
         cottage : scenery "cottage[examine cottage]" noun="cottage" {
            msg="The cottage looks cozy, tucked inside its covering of flowers."
            listed="true"
         }
         pond : scenery "pond[examine pond]" noun="pond" {
            msg="You can see several frogs[examine frogs] in the pond. Their croaking fills the air with frog[examine frogs] music." ;
            listed="true"
         }
      }
      on_command {
         : match "examine frogs" {
            : print "Frogs sit on lily pads and rocks, and swim through the water. They seem to be very happy in this pond." ;
         }
         : match "get frog;chase frog" {
            : print "\"Leave my frogs be,\" says the fairy, indicating a sign[read sign] next to her cottage." category="dark" ;
            : done ;
         }
         : match "examine sign;read sign" {
            : print "The sign has a drawing of a frog, and says \"NO CATCHING\" on it." ;
            : done ;
         }
         : match "give fairy;give _ _ fairy;give frog;release frog;drop frog" {
            : if ((noun1_is "frog" || noun2_is "frog") && is_present "frog") {
               : if (verb_is "release" || verb_is "drop") {
                  : print "You release the frog into the pond." ;
               }
               : else_if (verb_is "give" || verb_is "hand" || noun1_is "fairy" || noun2_is "fairy") {
                  : print "You offer the frog to the fairy." ;
               }
               : press_any_key ;
               : print "\"Why, thank you!\" the fairy smiles. \"In return, I'll tell you a clue...\"" category="dark";
               : gosub "discover" ;
               : create "clue_8" target = "inventory" ;
               : print (emsg "clue_8") ;
               : press_any_key ;
               : destroy "frog" ;
               : done ;
            }
         }
         : match "talk fairy;ask fairy" {
            : if (is_carried "frog") {
               : print "\"Oh! Is that a frog you're holding? I love frogs,\" the fairy says." category="dark" ;
            }
            : gosub "talk_fairy" ;
            : done ;
         }
      }
   }

   ## PATHMAGICAL ## MAGICAL PATH
   loc_pathmagical : location (loc_pathmagical_desc) header="Magical Path[look]" graphic = "loc_pathmagical" {
      contains {
         stream : scenery "stream[examine stream]" msg="The stream is clear; you can see stones[examine stones] on the bottom, as well as strange lights[examine lights]." noun="stream" listed="true" ;
         strange_lights : scenery "strange lights[examine strange lights]" msg="You're not sure what the lights are - bugs? But you notice that some of them are trapped inside a bottle[examine bottle]." noun="lights" adjective="strange" listed="false" ;
         bottle : scenery "bottle[examine bottle]" msg="The bottle is filled with water, strange lights, and a note[examine note]." noun="bottle" listed="false" ;
      }
      on_pre_describe {
      }
      on_describe {
      }
      on_command {
         : match "examine stream" {
            : mask {
               : add_trait subject="strange_lights" trait="_listed" ;
            }
         }
         : match "examine lights" {
            : mask {
               : add_trait subject="bottle" trait="_listed" ;
            }
         }
         : match "get bottle;examine note" {
            : print "You take the bottle from the stream and look at the note tucked inside..." ;
            : if (has_not_created "clue_6") {
               : gosub "discover" ;
               : create "clue_6" target = "inventory" ;
            }
            : print (emsg "clue_6") ;
            : done ;
         }
         : match "drop bottle" {
            : if (!has_not_created "clue_6") {
               : print "You make sure the bottle is exactly where you found it in the stream." ;
               : done ;
            }
         }
         : match "examine path" {
            : print "It's made of stone... someone put a lot of work into it." ;
            : done ;
         }
      }
   }

   ## PATH 1
   loc_path1 : location (loc_path1_desc) header="Path[look]" graphic = "loc_path1" {
      contains {
      }
      on_pre_describe {
      }
      on_describe {
      }
      on_command {
         : match "examine path" {
            : print "It's made of stone... someone put a lot of work into it." ;
            : done ;
         }
         : match "examine house;examine trees;examine forest" {
            : print "You don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything unusual." ;
            : done ;
         }
      }
   }

   ## FLOWERS
   loc_flowers : location (loc_flowers_desc) header="Flowers[look]" graphic = "loc_flowers" {
      contains {
         asters : scenery "asters[examine asters]" msg="Small flowers with rays of purple petals." noun="asters" listed="true" ;
         tulips : scenery "tulips[examine tulips]" msg="Curved orange flower petals atop long slender stems." noun="tulips" listed="true" ;
         daisies : scenery "daisies[examine daisies]" msg="Flowers with pinkish-white petals surrounding bright yellow centers." noun="daisies" listed="true" ;
         torch_lilies : scenery "torch lilies[examine lilies]" msg="Clusters of bright orange and red flowers make these flowers look like small torches." noun="lilies" adjective="torch" listed="true" ;
      }
      on_command {
         : match "examine house" {
            : print "It's a weather-worn old cabin. An old widower lives there and writes poetry." ;
            : done ;
         }
         : match "examine mountains" {
            : print "Someday you'll go there. But you've never left your small town before." ;
            : done ;
         }
         : match "examine water" {
            : print "You peer into the water, but you don't see anything out of the ordinary." ;
            : done ;
         }
         : match "examine flowers;examine hillside" {
            : print "The hillside is covered with colorful flowers. You're not sure if they're wild, or if they were planted by the widow who lives in the old cabin." ;
            : done ;
         }
         : match "get flowers" {
            : print "There are a lot of flowers - you'll have to be more specific." ;
            : done ;
         }
         : match "knock door;knock -" {
            : print "You knock on the door of the old cabin. Nobody answers." ;
            : done ;
         }
         : match "get aster;get asters" {
            : if (is_carried "aster") {
               : print "You only need one for now." ;
               : done ;
            }
            : if (!is_carried "aster") {
               : if (has_taken "aster" && !is_beside "aster") {
                  : print "You pick another aster." ;
                  : create "aster" target="inventory" ;
                  : done ;
               }
               : create "aster" ;
               : set_sentence "get aster" ;
            }
         }
         : match "get daisy;get daisies" {
            : if (is_carried "daisy") {
               : print "You only need one for now." ;
               : done ;
            }
            : if (!is_carried "daisy") {
               : if (has_taken "daisy" && !is_beside "daisy") {
                  : print "You pick another daisy." ;
                  : create "daisy" target="inventory" ;
                  : done ;
               }
               : create "daisy" ;
               : set_sentence "get daisy" ;
            }
         }
         : match "get tulip;get tulips" {
            : if (is_carried "tulip") {
               : print "You only need one for now." ;
               : done ;
            }
            : if (!is_carried "tulip") {
               : if (has_taken "tulip" && !is_beside "tulip") {
                  : print "You pick another tulip." ;
                  : create "tulip" target="inventory" ;
                  : done ;
               }
               : create "tulip" ;
               : set_sentence "get tulip" ;
            }
         }
         : match "get lily;get lilies" {
            : if (is_carried "torch_lily") {
               : print "You only need one for now." ;
               : done ;
            }
            : if (!is_carried "torch_lily") {
               : if (has_taken "torch_lily" && !is_beside "torch_lily") {
                  : print "You pick another torch_lily." ;
                  : create "torch_lily" target="inventory" ;
                  : done ;
               }
               : create "torch_lily" ;
               : set_sentence "get torch lily" ;
            }
         }
         : match "smell flowers;smell -" {
            : print "The flowers smell wonderful, but not as good as your grandma's flowers." ;
            : done ;
         }
      }
   }

   ## PATH 2
   loc_path2 : location (loc_path2_desc) header="Path[look]" graphic = "loc_path2" {
      contains {
         note1 : scenery "note[examine note]" msg="It's a note." listed="false" ;
      }
      on_pre_describe {
      }
      on_describe {
      }
      on_command {
         : match "examine door;examine hole" {
            : print "There is a tiny {tiny_door_open ? `hole`:`door`} at the base of a large tree{tiny_door_open ? `, and inside it is a note`}." ;
            : done ;
         }
         : match "open door" {
            : if (tiny_door_open) {
               : print "The door is already open." ;
               : done ;
            }
            : else {
               : print "You open the little door, revealing a small hole with a note inside." ;
               : set_boolean var="tiny_door_open" value="true" ;
               : add_trait subject = "note1" trait = "_listed" ;
               : done ;
            }
         }
         : match "close door;hide note" {
            : print "You close the tiny door." ;
            : set_boolean var="tiny_door_open" value="false" ;
            : remove_trait subject = "note1" trait = "_listed" ;
         }
         : match "examine note;get note;read note;remove note" {
            : if (tiny_door_open) {
               : print "You take the little note from the hole in the tree and read it..." ;
               : if (has_not_created "clue_2") {
                  : gosub "discover" ;
                  : create "clue_2" target = "inventory" ;
               }
               : print (emsg "clue_2") ;
               : done ;
            }
         }
         : match "enter door;enter tree" {
            : if (tiny_door_open) {
               : print "The door is way to tiny to enter." ;
            }
            : else {
               : print "The tiny door is closed." ;
            }
            : done ;
         }
      }
   }

   ## TOWER
   loc_tower : location (loc_tower_desc) header="Tower[look]" graphic = "loc_tower" {
      contains {
         tower : scenery "tower[examine tower]" msg="This used to be a watchtower, but it has been many years since the town was in any danger. {has_visited_towertop ? `You wouldn't mind being a lookout though; the view is terrific.`:`In fact, they removed the ladder that allowed sentries to climb to the top. \nYou wonder if you could climb up without a ladder.`}" listed="true" noun="tower";
         gryphon : scenery "gryphon[examine gryphon]" msg="A hulking beast with glossy black feathers and a sharp golden beak. There's an intelligent look in its eyes." cant_get_message="You can't take him with you." listed="false" noun="gryphon" ;
      }
      on_pre_describe {
         : if (mayor_at_tower && !mayor_at_tower_disappeared) {
            : set_true "mayor_at_tower_disappeared" ;
            : remove_trait subject="shadowy_figures" trait="_listed";
         }
      }
      on_command {
         : match "whistle -;whistle _;call gryphon"{
            : if (has_trait {subject="gryphon" trait="_listed"} ) {
               : print "The gryphon eyes you, wondering what you want." ;
               : done ;
            }
            : print "You whistle loudly. For a moment nothing happens, then suddenly a large black gryphon glides down from the trees and lands before you." ;
            : add_trait subject = "gryphon" trait = "_listed" ;
            : done ;
         }
         : match "climb tree" {
            : print "You climb a nearby tree, wondering if you could jump to the top of the tower... But it's much too far of a jump.\nYou climb back down." ;
            : done ;
         }
         : match "climb house" {
            : print "You try climbing onto the little house attached to the tower, but you don't get very far." ;
            : done ;
         }
         : match "jump -;jump up;jump tower" {
            : print "You can't jump THAT high." ;
            : done ;
         }
         : match "climb -;climb up;up -;climb tower;go up" {
            : if ( has_trait {subject="gryphon" trait="_listed"} ) {
               : print "Try riding the gryphon, perhaps it will take you to the top of the tower." ;
               : done ;
            }
            : else {
               : print "You dig your nails and shoetips into the grooves of the stone tower and try climbing upwards, but you keep slipping.\nYou drop back down to the ground." ;
               : done ;
            }
         }
         : match "examine gryphon;climb gryphon;fly gryphon;ride gryphon;jump gryphon" {
            : if ( has_trait {subject="gryphon" trait="_listed"} ) {
               : if (verb_is "examine") {
                  : print (emsg "gryphon") ;
                  : done ;
               }
               : print "You slowly and carefully climb onto the gryphon's back. With a huge woosh, it thrusts its wings and launches into the sky, carrying you to the top of the tower." ;
               : press_any_key ;
               : goto "loc_towertop" ;
               : done ;
            }
            : else {
               : print "The gryphon isn't here." ;
               : done ;
            }
         }
         : match "examine mayor;examine figures;listen mayor;listen figures" {
            : if (mayor_at_tower) {
               : print "You look for the mayor and the shadowy figure, but they're gone." ;
               : done ;
            }
         }
         : match "examine water;examine forest;examine trees" {
            : print ("You peer into the "+original"noun1"+", but you don't see anything unusual.") ;
            : done ;
         }
      }
   }
   ## TOWER TOP
   loc_towertop : location (loc_towertop_desc) header="Tower[look]" graphic = "loc_tower" {
      contains {
         tower2 : scenery "tower[examine tower]" msg="It's a bit unnerving to be so high with no way down other than the gryphon." listed="true" noun="tower";
         gryphon2 : scenery "gryphon[examine gryphon]" msg="A hulking beast with glossy black feathers and a sharp golden beak. There's an intelligent look in its eyes." cant_get_message="You can't take him with you." listed="true" noun="gryphon" ;
         shadowy_figures : scenery "shadowy figures[examine figures]" msg="It seems to be the mayor, arguing with a man dressed all in black. What are they arguing about?" listed="false" noun="figures" adjective="shadowy" ;
      }
      on_pre_describe {
         : set_true "has_visited_towertop" ;
      }
      on_command {
         : match "get down;get off;exit tower;climb down;down -;exit -;board gryphon;fly gryphon;climb gryphon" {
            : if (!mayor_at_tower && !has_trait {subject="shadowy_figures" trait="_listed"}) {
               : print "You're about to climb onto the gryphon's back when you see something down below." ;
               : press_any_key ;
               : print "You can see two shadowy figures hiding in the forest." ;
               : add_trait subject="shadowy_figures" trait="_listed" ;
               : set_true "mayor_at_tower" ;
               : increment "mystery_clues" ;
               : done ;
            }
            : else {
               : print "You gently climb back onto the gryphon's back, and it flies you down to the ground." ;
               : press_any_key ;
               : goto "loc_tower" ;
               : done ;
            }
         }
         : match "examine mayor;examine figures" {
            : if (mayor_at_tower_disappeared) {
               : print "You don't see the mayor and the shadowy man anymore." ;
               : done ;
            }
         }
         : match "listen figures;listen mayor;listen argument" {
            : if (mayor_at_tower_disappeared) {
               : print "You don't see the mayor and the shadowy man anymore." ;
               : done ;
            }
            : else {
               : print "You hear bits of what they're saying - \"I'll get you the money\" and \"I don't care what you have to do.\" Suspicious!" ;
               : done ;
            }
         }
         : match "whistle -;whistle _;call gryphon"{
            : print "The gryphon eyes you, wondering what you want." ;
            : done ;
         }
         : match "examine tower" {
            : if (has_not_created "clue_12") {
               : print "Just as you suspected, there's a clue up here!" ;
               : gosub "discover" ;
               : create "clue_12" target = "inventory" ;
               : print (emsg "clue_12") ;
               : done ;
            }
         }
      }
   }
   loc_towertop_exit : location ;
}

#########################
## CONNECTIONS
#########################

connections {

   from, direction, to = [
      loc_town1, west, loc_tower
      loc_town1, south, loc_town2
      loc_town2, south, loc_shops1
      loc_shops1, east, loc_shops2
      loc_shops2, east, loc_circus1
      loc_circus1, east, loc_circus2
      loc_ferriswheel_exit, enter, loc_ferriswheel
      loc_darts_exit, enter, loc_darts
      loc_shops1, south, loc_river1
      loc_river1, south, loc_river2
      loc_river2, south, loc_bridge
      loc_bridge, west, loc_path1
      loc_bridge, south, loc_enchanted1
      loc_enchanted1, south, loc_witch
      loc_witch, east, loc_graveyard
      loc_path1, north, loc_flowers
      loc_flowers, north, loc_path2
      loc_path2, east, loc_tower
      loc_towertop, down, loc_towertop_exit
      loc_path1, south, loc_pathmagical
      loc_pathmagical, south, loc_fairy
      loc_fairy, south, loc_mushrooms1
      loc_mushrooms1, east, loc_mushrooms2
      loc_mushrooms2, east, loc_witch
   ]
}

#########################
## ZONES
#########################

zones {
   nobody_zone : zone { locations  = [loc_towertop,loc_ferriswheel,loc_darts,loc_number,you_win] }
   enchanted_zone : zone { locations = [loc_pathmagical,loc_mushrooms1,loc_mushrooms2,loc_fairy] }
   path_zone : zone { locations = [loc_path1,loc_flowers,loc_path2] }
   circus_zone : zone { locations = [loc_circus1,loc_circus2,loc_ferriswheel,loc_darts,loc_number] }
   river_zone : zone { locations = [loc_town1,loc_town2,loc_shops1,loc_shops2,loc_bridge,loc_river1,loc_river2,loc_enchanted1] }
}

#########################
## OBJECTS ## CHARACTERS
#########################

objects {
   ## SYSTEM
   coins : object "<coins<#da0>>[examine coins]" ;

   ## CHARACTERS
   mayor : object "the mayor[examine mayor]" {
      msg="{mayor_desc}" noun="mayor" listed="true" traits=[t_character] at="loc_town1"
   }
   z_clara : object "<Clara<#6cf>>[examine clara]" {
      msg="{clara_desc}" at="loc_tower"
      noun="clara" listed="true" traits=[t_character]
   }
   z_elle : object "<Elle<#6cf>>[examine elle]" {
      msg="{elle_desc}" at="loc_fairy"
      noun="elle" listed="true" traits=[t_character]
   }
   z_sophie : object "<Sophie<#6cf>>[examine sophie]" {
      msg="{sophie_desc}" at="loc_witch"
      noun="sophie" listed="true" traits=[t_character]
   }
   z_francis : object "<Francis<#6cf>>[examine francis]" {
      msg="{francis_desc}" at="loc_circus2"
      noun="francis" listed="true" traits=[t_character]
   }
   z_ollie : object "<Ollie<#6cf>>[examine ollie]" {
      msg="{ollie_desc}"  at="loc_shops2"
      noun="ollie" listed="true" traits=[t_character]
   }
   z_reed : object "<Reed<#6cf>>[examine reed]" {
      msg="{reed_desc}" at="loc_bridge"
      noun="reed" listed="true" traits=[t_character]
   }

   ## FOOD
   cotton_candy : object "cotton candy[examine cotton candy]" {
      msg="A pink, puffy cloud of sugar." 
      noun="candy" adjective="cotton" listed="true" traits=[t_food]
      drop_message="You drop the cotton candy, but you have a nagging feeling that you're supposed to do something with it." 
   }
   hotdog : object "{hotdog_name}" {
      msg="The {hotdog_name} looks delicious. Dogs are the best." 
      noun="hotdog" experimental_matching_text_sequences=["hot dog"] listed="true" traits=[t_food] 
   }
   popcorn : object "{popcorn_name}" {
      msg="The {popcorn_name} looks interesting. You're not sure you want to eat it." 
      noun="popcorn" listed="true" traits=[t_food,t_plural] 
   }
   candy_apple : object "{apple_name}" {
      msg="It's an apple covered with gooey stuff. It looks kind of difficult to eat... but you'd still try." 
      noun="apple" adjective="candy" listed="true" traits=[t_food] 
   }
   pizza : object "{pizza_name}" {
      msg="You actually don't care for pizza, let alone {pizza_name}. You should probably just throw it away." 
      noun="pizza" listed="true" traits=[t_food,t_plural] 
   }

   ## INGREDIENTS
   aster : object "aster[examine aster]" noun="aster" {
      msg="A small flower with a ray of purple petals."
      drop_message="You drop the aster, but you have a nagging feeling that you're supposed to do something with it." 
      listed="true" traits=[t_ingredient] 
   }
   bolete : object "bolete[examine bolete]" noun="bolete" {
      msg="A reddish-orange mushroom. It doesn't look very appetizing."
      listed="true" traits=[t_ingredient] 
   }
   daisy : object "daisy[examine daisy]" noun="daisy" {
      msg="Pinkish-white petals surround a bright yellow center." 
      listed="true" traits=[t_ingredient] 
   }
   pansies : object "pansies[examine pansies]" noun="pansies" {
      msg="A small bunch of purple pansies, your favorite flower." 
      listed="true" traits=[t_ingredient,t_plural] 
   }
   torch_lily : object "torch lily[examine lily]" noun="lily" adjective="torch" {
      msg="Clusters of bright orange and red flowers make this flower look like a small torch." 
      listed="true" traits=[t_ingredient] 
   }
   tulip : object "tulip[examine tulip]" noun="tulip" {
      msg="Curved orange petals atop a long slender stem." 
      listed="true" traits=[t_ingredient] 
   }
   webcap : object "webcap[examine webcap]" noun="webcap" {
      msg="A purple mushroom. It doesn't look very appetizing."
      drop_message="You drop the webcap, but you have a nagging feeling that you're supposed to do something with it." 
      listed="true" traits=[t_ingredient] 
   }

   ## ITEMS
   golden_crown : object "Golden Crown[examine golden crown]" {
      msg="Each year the crown passes to the new winner of the Midsummer Treasure Hunt. This year, it's yours!"
      listed="true" traits=[t_item] wearable="true"
   }
   necklace : object "{necklace_name}" {
      msg="Did the mayor hide this necklace under a tree? Why would he do that?" 
      noun="necklace" experimental_matching_text_sequences=["something shiny","shiny object","shiny"]
      traits=[t_item] wearable="true"
   }
   ring : object "{ring_name}" {
      msg="You found this ring outside the mayor's house. Is it his?" 
      noun="ring" experimental_matching_text_sequences=["something sparkly","sparkling object","sparkly object","sparkling","sparkly"]
      traits=[t_item] wearable="true"
   }
   perfume : object "perfume" {
      msg="It smells like a nice sunny day in the meadow. Lovely." 
      noun="perfume" adjective="floral" traits=[t_item]
   }
   liquid_fire : object "liquid fire" {
      msg="The potion is yellow and orange and swirling around. The bottle is hot to the touch." 
      noun="fire" adjective="liquid" traits=[t_item]
   }
   plush_toy : object "plush toy[examine plush toy]" {
      msg="{plush_toy_desc}" noun="toy" adjective="plush" listed="true" traits=[t_item]
      drop_message="{unraveled_toy ? `You drop the plush toy.`:`You drop the plush toy, but you have a nagging feeling that you're supposed to do something with it.`}"
   } 
   flower_crown : object "flower crown[examine flower crown]" {
      msg="Your grandmother makes these each summer and sells them to the circus. She makes pretty good money from it!"
      wear_message="You place the flower crown on your head. Maybe it will give you good luck!"
      noun="crown" adjective="flower" listed="true" wearable="true" traits=[t_item] 
   }
   clown_nose : object "clown nose[examine clown nose]" {
      msg="A red ball to put on the end of your nose. It's quite silly." 
      wear_message="You stick the clown nose on the end of your nose. Will anyone notice it?"
      noun="nose" adjective="clown" listed="true" wearable="true" traits=[t_item] 
   }
   circus_shirt : object "circus shirt[examine circus shirt]" {
      msg="It's a pink shirt that says \"Midsummer Circus\" above a picture of a circus tent."
      wear_message="You put the circus shirt on over your clothes. You're definitely feeling the circus vibe."
      noun="shirt" adjective="circus" listed="true" wearable="true" traits=[t_item] 
   }
   balloon_animal : object "balloon animal[examine balloon animal]" {
      msg="You're not sure what animal it's supposed to be. It's yellow and has a long neck, so maybe a giraffe?" 
      noun="animal" adjective="balloon" listed="true" traits=[t_item] 
   }
   circus_mug : object "circus mug[examine circus mug]" {
      msg="It's a blue mug that says \"Midsummer Circus\" alongside some balloons." 
      noun="mug" adjective="circus" listed="true" traits=[t_item] 
   }
   purple_potion : object "purple potion[examine purple potion]" {
      msg="It's a bright purple liquid that smells like the forest." 
      noun="potion" adjective="purple" listed="true" traits=[t_item] 
   }
   frog : object "frog[examine frog]" {
      msg="It's still alive!" noun="frog" listed="true" traits=[t_item] 
   }

   ## CLUES
   clue_1 : object "Clue 1" msg = "<^b^CLUE 1:> <Dogs and pickles go together.>" noun="clue" adjective="1" listed="false" traits=[t_clue] ;
   clue_2 : object "Clue 2" msg = "<^b^CLUE 2:> <Boil and stir three elements of purple.>" noun="clue" adjective="2" listed="false" traits=[t_clue] ;
   clue_3 : object "Clue 3" msg = "<^b^CLUE 3:> <Red on White, Yellow on Black, Blue on Green.>" noun="clue" adjective="3" listed="false" traits=[t_clue] ;
   clue_4 : object "Clue 4" msg = "<^b^CLUE 4:> <Knock on the doors of the Blessed, the Free, and the Loved.>" noun="clue" adjective="fourth" listed="false" traits=[t_clue] ;
   clue_5: object "Clue 5" msg = "<^b^CLUE 5:> <Cast your line with corn popped in lime.>" noun="clue" adjective="5" listed="false" traits=[t_clue] ;
   clue_6 : object "Clue 6" msg = "<^b^CLUE 6:> <Whistle to climb higher.>" noun="clue" adjective="6" listed="false" traits=[t_clue] ;
   clue_7 : object "Clue 1" msg = "<^b^CLUE 7:> <\" midsummer \">" noun="clue" adjective="7" listed="false" traits=[t_clue] ;
   clue_8 : object "Clue 2" msg = "<^b^CLUE 8:> <\" nights \">" noun="clue" adjective="8" listed="false" traits=[t_clue] ;
   clue_9 : object "Clue 3" msg = "<^b^CLUE 9:> <\" alive \">" noun="clue" adjective="9" listed="false" traits=[t_clue] ;
   clue_10 : object "Clue 4" msg = "<^b^CLUE 10:> <\" with \">" noun="clue" adjective="10" listed="false" traits=[t_clue] ;
   clue_11: object "Clue 5" msg = "<^b^CLUE 11:> <\" magic \">" noun="clue" adjective="11" listed="false" traits=[t_clue] ;
   clue_12 : object "Clue 6" msg = "<^b^CLUE 12:> <Tell the five-word password to Alba>" noun="clue" adjective="12" listed="false" traits=[t_clue] ;
}

#########################
# On Tick
#########################

on_tick {
   : gosub "song" ;
   : if (finished_intro && !is_at "nobody_zone" && !is_at "loc_circus2") {
      # These if statements make it so the other treasure hunters can't get too far ahead of the player
      : if (((count("clues_found")+3) < ollie_found) || ((count("clues_found")+3) < francis_found) || ((count("clues_found")+3) < reed_found) || ((ollie_found >= 9 && reed_found >= 9 && francis_found >=9) && clues_remain >= 2)) {
      }
      : else {
         : cycle key = "players_gain_clues" skip_interval = "8"  {
            : execute_one_at_random {
               : increment "clara_found" ;
               : increment "sophie_found" ;
               : increment "elle_found" ;
            }
            : execute_one_at_random {
               : increment "reed_found" ;
               : increment "francis_found" ;
               : increment "ollie_found" ;
            }
         }
         : if (clara_found == 12 || elle_found == 12 || sophie_found == 12 || reed_found == 12 || ollie_found == 12 || francis_found == 12) {
            : increment "another_player_might_win" ;
         }
      }
   }
//   : print "{clara_found},{elle_found},{sophie_found},{francis_found},{ollie_found},{reed_found}" ;
}

#########################
# On Pre-Describe
#########################

on_pre_describe {
   : if (!is_at "loc_mushrooms1" && has_trait {subject="grumpy_man" trait="_listed"}) {
      : remove_trait subject="grumpy_man" trait="_listed" ;
   }
   : if (!is_at "loc_tower" && has_trait {subject="gryphon" trait="_listed"}) {
      : remove_trait subject="gryphon" trait="_listed" ;
   }
   : if (is_just_entered () && !is_at "nobody_zone") {
      : iterate "_beside" filter -> ( item_has_trait "t_character" )  {
         : if (chance(25)) {
            : destroy (item()) ;
         }
      }
      : if (chance(17)) {
         : create "z_clara" ;
      }
      : if (chance(17)) {
         : create "z_elle" ;
      }
      : if (chance(17)) {
         : create "z_francis" ;
      }
      : if (chance(17)) {
         : create "z_ollie" ;
      }
      : if (chance(17)) {
         : create "z_reed" ;
      }
      : if (chance(17)) {
         : create "z_sophie" ;
      }
   }
}

#########################
# On Describe
#########################

on_describe {
}

#########################
# On Command 1
#########################

on_command {

   ##### CLUES #####
   : if (is_present "cotton_candy") {
      : match "eat candy;taste candy" {
         : print "You tear off a fluffy wad of cotton candy and stick it in your mouth. As it melts, you realize there's a piece of paper in your mouth! You pull it out..." ;
         : gosub "discover" ;
         : create "clue_3" target = "inventory" ;
         : print (emsg "clue_3") ;
         : destroy "cotton_candy" ;
         : done ;
      }
   }
   : if (is_present "plush_toy") {
      : match "examine thread" {
         : print "{unraveled_toy ? `There's  nothing to see.`:`You wonder what will happen if you pull it...`}" ;
         : done ;
      }
      : match "pull thread;unravel thread;unravel toy" {
         : if (!unraveled_toy) {
            : print "You slowly pull the loose thread on the ladybug plush. As you pull it, a seam opens up on the side of the ladybug." ;
            : set_true "unraveled_toy" ;
            : done ;
         }
         : print "You already unraveled the toy. It has an open seam." ;
         : done ;
      }
      : match "examine seam;examine hole;examine toy" {
         : if (unraveled_toy && has_not_created "clue_9") {
            : print "You peer into the open seam on the ladybug plush. There's a note inside! You pull it out..." ;
            : gosub "discover" ;
            : create "clue_9" target = "inventory" ;
            : print (emsg "clue_9") ;
            : done ;
         }
      }
   }
   : match "whistle -;whistle _" {
      : print "You whistle loudly and wait a few moments, but nothing happens. Maybe this isn't the right place." ;
      : done ;
   }

   ##### CHARACTER INTERACTIONS #####
   : match "talk -" {
      : print "You'll have to specify who you're trying to talk to." ;
      : done ;
   }
   : match "give necklace;give ring" {
      : print "You'll need to talk to them first." ;
      : done ;
   }
   : match "talk _;ask _" {
      : if (is_present "golden_crown" && !is_worn "golden_crown") {
         : disambiguate_s1 "present" ;
         : if (s1() != "unknown") {
            : if (noun1_is "clara" || noun1_is "elle" || noun1_is "sophie" || noun1_is "reed" || noun1_is "ollie" || noun1_is "francis") {
               : print "\"Aw shucks... You won, huh? Well what are you waiting for? Put the crown on.\"" category="dark" ;
               : done ;
            }
            : else {
               : print "\"Congratulations! When you're ready to start the ceremony, wear the crown.\"" category="dark" ;
            }
         }
      }
   }
   : match "talk clara;talk elle;talk sophie;talk ollie;talk francis;talk reed" {
      : disambiguate_s1 "present" ;
      : if (s1() != "unknown") {
         : set_string var="temp_name" value -> (title_case(original"noun1")) ;
         : if (subject1_is "z_clara") { : set_integer var="temp_int" value -> (clara_found) ; }
         : if (subject1_is "z_elle") { : set_integer var="temp_int" value -> (elle_found) ; }
         : if (subject1_is "z_sophie") { : set_integer var="temp_int" value -> (sophie_found) ; }
         : if (subject1_is "z_ollie") { : set_integer var="temp_int" value -> (ollie_found) ; }
         : if (subject1_is "z_francis") { : set_integer var="temp_int" value -> (francis_found) ; }
         : if (subject1_is "z_reed") { : set_integer var="temp_int" value -> (reed_found) ; }
         : gosub "ask_for_clues" ;
      }
   }
   : match "talk mayor;ask mayor" {
      : if (is_present "mayor") {
         : gosub "talk_mayor" ;
         : done ;
      }
   }
   : if ((is_at "loc_tower" || is_at "loc_towertop") && has_trait {subject="gryphon" trait="_listed"}) {
      : match "pet gryphon;scratch gryphon" {
         : if (fed_gryphon_pizza) {
            : print "The gryphon bows their head and you scratch behind their ear. They chirp happily." ;
         }
         : else {
            : print "They don't seem to trust you enough. Maybe if you fed them their favorite food?" ;
         }
      }
      : match "give _ to gryphon;feed _ to gryphon" {
         : set_sentence "feed gryphon the $1" ;
      }
      : match "feed gryphon;feed gryphon the _;give gryphon;give gryphon the _" {
         : if (noun2_is "") {
            : print ("You'll have to be more specific. "+original"verb"+" to who?") ;
            : done ;
         }
         : else_if (noun2_is "pizza") {
            : print "You toss the pizza to the gryphon, who swallows it one bite. They make a happy purring noise." ;
            : set_true "fed_gryphon_pizza" ;
            : if (!achievement_fed_gryphon_pizza) {
               : pause "1600" ;
               : gosub "achievement" ;
               : print "^c^Gryphons love pizza" ;
               : set_true "achievement_fed_gryphon_pizza" ;
            }
               : destroy "pizza" ;
               : done ;
         }
         : else_if (noun2_is "apple") {
            : print "You toss the apple to the gryphon, who swallows it one bite. They make a happy purring noise." ;
            : destroy "candy_apple" ;
            : done ;
         }
         : disambiguate_s2 "present" ;
         : if (s2() == "unknown") {
            : print "You don't have one of those." ;
            : done ;
         }
         : print ("You offer the "+original"noun2"+" to the gryphon, but they don't seem interested.") ;
         : done ;
      }
   }
   ##### FOOD #####
   : match "eat _" {
      : disambiguate_s1 "present" ;
      : if (s1() == "unknown") {
         : print ("There's nothing to "+original "verb"+".") ;
      }
      : else_if (s1_has_trait "t_food") {
         : execute_one_at_random {
            : print ("You gobble up the "+d(s1())+". Not bad!") ;
            : print ("You chew the "+d(s1())+", nodding to yourself. You've had worse.") ;
            : print ("You eat the "+d(s1())+" and lick your fingers. Delicious.") ;
            : print ("You stuff the "+d(s1())+" into your mouth. Wow! That was good.") ;
            : print ("You eat the "+d(s1())+" and nearly gag. Gross! That wasn't what you expected.") ;
         }
         : destroy (s1()) ;
      }
      : else {
         : print "That's not food." ;
      }
      : done ;
   }
   #### WIN THE GAME #####
   : match "wear crown" {
      : if (is_present "golden_crown") {
         : print "You place the Golden Midsummer Crown on your head..." ;
         : press_any_key ;
         : create "golden_crown" target="inventory" worn="true" ;
         : goto "you_win" ;
         : redescribe ;
      }
   }
   : match "end game;ceremony -" {
      : if (another_player_might_win >= 30) {
         : goto "you_lose" ;
         : redescribe ;
      }
      : else {
         : print "To go to the ceremony, you'll need to WEAR the GOLDEN CROWN." ;
         : done ;
      }
   }
   ##### FOR PEOPLE WHO LIKE TO TRY ALL SORTS OF RANDOM COMMANDS #####
   : match "smell -;smell scents;smell air" {
      : print "It smells nice out." ;
      : done ;
   }
   : match "taste _;smell _" {
      : disambiguate_s1 "present" ;
      : if (s1() == "unknown") {
         : print ("There's nothing to "+original "verb"+".") ;
      }
      : else {
         : print ("It "+original"verb"+"s just like "+d(s1())+".") ;
      }
      : done ;
   }
   : match "enter house;go house;enter building;go building;enter booth;open door;enter door" {
      : print "The treasure hunt rules say \"do not enter any buildings.\"" ;
      : done ;
   }
   : match "enter water;jump water;swim water;go swimming;swim -" {
      : if (!is_at "loc_graveyard" && !is_at "loc_path2" && !is_at "loc_circus1" && !is_at "loc_circus2" && !is_at "nobody_zone") {
         : print "You jump into the water with a splash. It's cool and refreshing." ;
         : if (!achievement_went_swimming) {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Went for a swim" ;
            : set_true "achievement_went_swimming" ;
         }
      }
   }
   : if (is_present "perfume") {
      : match "wear perfume;use perfume;spray perfume;spritz perfume" {
            : print "You spritz the floral perfume onto yourself. It transports you to the field of flowers!" ;
            : press_any_key ;
            : goto "loc_flowers" ;
            : create "perfume" target="inventory" ;
            : redescribe ;
      }
      : match "smell perfume" {
         : print "It smells like a field of flowers on a bright sunny day. You wouldn't mind wearing[wear perfume] it." ;
         : done ;
      }
      : match "give perfume" {
         : print "No way! You're not giving up this magical flower concoction." ;
         : done ;
      }
      : match "drink perfume" {
         : print "Perfume generally doesn't taste good. You don't think this would be an exception." ;
         : done ;
      }
   }
   : if (is_present "purple_potion") {
      : match "smell potion" {
         : print "It smells like damp soil, trees, and flowers." ;
         : done ;
      }
      : match "drink potion" {
         : print "You take a tiny sip of the potion and spit it back out. That doesn't taste good." ;
         : done ;
      }
   }
   : if (is_present "liquid_fire") {
      : match "drink fire;eat fire;sip fire;taste fire" {
         : print "You take a sip of the liquid fire. Your mouth and throat burn like nothing you've ever felt before..." ;
         : press_any_key ;
         : print "You let out a huge belch and are shocked to have flames billow from your mouth like a dragon!" ;
         : if (!achievement_belched_fire) {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Belched fire like a dragon" ;
            : set_true "achievement_belched_fire" ;
         }
         : done ;
      }
      : match "pour fire;drop fire" {
         : print "You drop some of the liquid fire on the ground, and a fire erupts. You quickly stamp it out with your foot." ;
         : done ;
      }
      : match "smell fire" {
         : print "It smells like a campfire." ;
         : done ;
      }
   }
   : match "kiss frog" {
      : if (is_present "frog") {
         : print "Is there something magical about this frog? You'd better try kissing it just in case." ;
         : press_any_key ;
         : print "You scrunch up your face and give the frog a big kiss right on the lips..." ;
         : press_any_key ;
         : print "...yuck! That was gross. Nothing happens, except you think the frog smiled at you." ;
         : if (!achievement_kissed_the_frog) {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^The frog is no prince charming" ;
            : set_true "achievement_kissed_the_frog" ;
         }
         : done ;
      }
   }
   : match "examine self" {
      : print "You are 13-years-old. You look like any kid who swims and runs through the forest every day - dirty, strong, sun-darkened, and messy." ;
      : done ;
   }
}

#########################
# On Command 2
#########################

on_command_2 {
   : match "sound _;toggle sound;turn sound" {
      : gosub "sound_toggle" ;
   }
   : match "music _;toggle music;turn music" {
      : gosub "music_toggle" ;
   }
   : match "tutorial _" {
      : if (tutorial_is_finished) {
         : print "You have finished the tutorial. Type HELP if you need more help!" category="tutorial";
         : done ;
      }
      : else_if (!preposition_is "on" || (preposition_is "" && tutorial_is_on)) {
         : set_false "tutorial_is_on" ;
         : print "The tutorial is now turned OFF." category="tutorial";
      }
      : else {
         : print "The tutorial is now turned ON." category="tutorial";
         : set_true "tutorial_is_on" ;
         : print "Moving to the tutorial location..." category="tutorial";
         : press_any_key ;
         : goto "loc_town2" ;
         : redescribe ;
      }
   }
   : match "map -;_ map" {
      : print_graphic "map" align="center" width = "65"  clear_screen = "true";
      : press_any_key ;
      : redescribe ;
   }
   : match "help -;get help;help me" {
      : gosub "view_help" ;
   }
   : match "hint -;get hint" {
      : print "To get hints, TALK to the other treasure hunters in the game (Clara, Elle, Francis, Ollie, Reed, and Sophie). The more hints they find, the more they can help you!" ;
      : done ;
   }
   : match "get _" {
      : disambiguate_s1 "present" ;
      : if (s1() == "unknown") {
         : print ("There's nothing to get.") ;
         : done ;
      }
      : gosub "pickup" ;
   }
   : match "refresh -;return -;exit -" {
      : if (verb_is "exit" && is_exit_listed(12)) {
         : move (12);
      }
      : redescribe ;
   }
   : match "return _;go _;travel _;move _" {
      : if (verb_is "return" && noun1_is "") { : redescribe ; }
      : if (preposition_is "" && noun1_is "") {
         : print ("To travel to a location, type "+upper(original "verb")+" TO LOCATION. For example, "+upper(original "verb")+" TO "+upper(original"noun1")+".") ;
         : done ;
      }
      : if (has_visited "loc_town1" && (noun1_is "town" || noun1_is "mayor" || noun1_is "mayor's house")) {
         : gosub "traveling" ;
         : goto "loc_town1";
         : redescribe ;
      }
      : if (has_visited "loc_shops1" && (noun1_is "shop" || noun1_is "food" || noun1_is "sammys" || noun1_is "alba" || noun1_is "shops")) {
         : gosub "traveling" ;
         : goto "loc_shops1";
         : redescribe ;
      }
      : if (has_visited "loc_shops2" && (noun1_is "grandma" || noun1_is "florist")) {
         : gosub "traveling" ;
         : goto "loc_shops2";
         : redescribe ;
      }
      : if (has_visited "loc_circus1" && (noun1_is "circus" || noun1_is "candy")) {
         : gosub "traveling" ;
         : goto "loc_circus1";
         : redescribe ;
      }
      : if (has_visited "loc_mushrooms1" && (noun1_is "mushrooms" || noun1_is "mushroom")) {
         : gosub "traveling" ;
         : goto "loc_mushrooms1";
         : redescribe ;
      }
      : if (has_visited "loc_witch" && (noun1_is "witch" || noun1_is "hut" || noun1_is "cauldron")) {
         : gosub "traveling" ;
         : goto "loc_witch";
         : redescribe ;
      }
      : if (has_visited "loc_graveyard" && (noun1_is "graveyard" || noun1_is "cemetery" || noun1_is "graves")) {
         : gosub "traveling" ;
         : goto "loc_graveyard";
         : redescribe ;
      }
      : if (has_visited "loc_tower" && (noun1_is "tower" || noun1_is "gryphon")) {
         : gosub "traveling" ;
         : goto "loc_tower";
         : redescribe ;
      }
      : if (has_visited "loc_flowers" && noun1_is "flowers") {
         : gosub "traveling" ;
         : goto "loc_flowers";
         : redescribe ;
      }
      : if (has_visited "loc_bridge" && noun1_is "bridge") {
         : gosub "traveling" ;
         : goto "loc_bridge";
         : redescribe ;
      }
      : if (has_visited "loc_river2" && noun1_is "river") {
         : gosub "traveling" ;
         : goto "loc_river2";
         : redescribe ;
      }
      : if (has_visited "loc_path1" && noun1_is "path") {
         : gosub "traveling" ;
         : goto "loc_path1";
         : redescribe ;
      }
      : print "Hmm... That didn't work." ;
   }
   : match "look" {
      : if (!has_typed_look) {
         : set_true "has_typed_look" ; // FOR TUTORIAL
         : redescribe ;
      }
   }
   : match "i -" {
      : set_true "has_checked_inventory" ;
      : gosub "update_inventory" ;
      : print "\n" ;
      : print "\n^c^^b^<•<#78c>> <+<#89d>> <I<#9ae>><N<#abf>><V<#bcf>><E<#9ae>><N<#abf>><T<#bcf>><O<#9ae>><R<#abf>><Y<#bcf>><:<#9ae>> <+<#89d>> <•<#78c>>\n\n" ;
      : if (count "inventory_ingredients" > 0) {
         : print (
            "<^b^INGREDIENTS:<#000>> "+
               construct_string {
                  from      -> ("inventory_ingredients")
                  sep       -> (", ")
                  final_sep -> (", and ")
                  mutate    -> (strip_article(d(item())))
               }
               +".") graphic="icon_ingredients" ;
      }
      : if (count "inventory_ingredients" == 0) {
         : print "<^b^INGREDIENTS:<#000>> <none<#fff>>." graphic="icon_ingredients" ;
      }
      : if (count "inventory_food" > 0) {
         : print ("<^b^FOOD:<#000>> "+
               construct_string {
                  from      -> ("inventory_food")
                  sep       -> (", ")
                  final_sep -> (", and ")
                  mutate    -> (strip_article(d(item())))
               }
               +".") graphic="icon_food" ;
      }
      : if (count "inventory_food" == 0) {
         : print "<^b^FOOD:<#000>> <none<#fff>>." graphic="icon_food" ;
      }
      : if (count "inventory_items" > 0) {
         : print (
            "<^b^ITEMS:<#000>> "+
               construct_string {
                  from      -> ("inventory_items")
                  sep       -> (", ")
                  final_sep -> (", and ")
                  mutate    -> (d(item()))
               }
               +".") graphic="icon_items" ;
      }
      : if (count "inventory_items" == 0) {
         : print "<^b^ITEMS:<#000>> <none<#fff>>." graphic="icon_items" ;
      }
      : if (count "inventory_worn" > 0) {
         : print (
            "^i^You are wearing "+
               construct_string {
                  from      -> ("inventory_worn")
                  sep       -> (", ")
                  final_sep -> (", and ")
                  mutate    -> (d(item()))
                  
               }
               +".") graphic="icon_blank" ;
      }
      : if (type_return) {
         : print "^c^(<Return to>[look] {current_location}[look])" category="tutorial" ;
      }
      : if (!has_typed_look) {
         : print "^c^(Type LOOK to clear the screen and refresh the location.)" category="tutorial" ;
         : set_true "type_return" ;
      }
   }
   : match "clues -;view clues;read clues;examine clues;remember clues;look clues" {
      : set_true "has_checked_clues" ;
      : if (!is_carried "t_clue") {
         : print "You haven't found any clues yet." ;
         : done ;
      }
      : gosub "view_clues" ;
      : if (tutorial_is_on && !has_typed_look) {
         : tutorial "Type LOOK to clear the screen and refresh the location." ;
      }
   }
   : match "drop clue" {
      : print "You can't drop clues." ;
      : done ;
   }
   : match "examine money;money -" {
      : print "Everything is free on Midsummer's Eve!" ;
      : done ;
   }
   : match "xyzzy _;plugh _;plover _;yoho _" {
      : print ("You whisper "+original"verb"+" to yourself...") ;
      : press_any_key ;
      : set_true "xyzzy" ;
      : goto "loc_witch" ;
      : redescribe ;
   }
   : match "view achievements;list achievements;achievements -" {
      : print "{achievements}" ;
      : done ;
   }
   : match "credit _;credits _;info -;information -;fonts -" {
      : print "^c^^b^<•<#78c>> <+<#89d>> <C<#9ae>><R<#abf>><E<#bcf>><D<#9ae>><I<#abf>><T<#bcf>><S<#9ae>> <+<#89d>> <•<#78c>>" ;
      : print ("<^b^"+ sys(9000) +">[https://grizel.itch.io/sindrella] ("+ sys(9070)+")") ; // 9000=gameinfo_game_name, 9070=gameinfo_game_version
      : print (sys(9120)) ; // 9120=gameinfo_copyright_message
      : print ("✤ <^b^Adventuron Engine:<#9ae>>[http://adventuron.io] "+"<"+sys(8000)+"<#9ae>>") ; // 8000=adventuron_fullname_version
      : print "✤ <^b^Music:<#9ae>> <Tinkerbelle<#bcf>>[https://pixabay.com/music/fantasy-dreamy-childrens-tinkerbelle-144338/], <Spring Waltz<#bcf>>[https://pixabay.com/music/main-title-spring-waltz-of-the-glen-145324/], <Celtic Handmaiden<#bcf>>[https://pixabay.com/music/folk-the-celtic-handmaiden-147078/], <Nymph's Tea Party<#bcf>>[https://pixabay.com/music/fantasy-dreamy-childrens-the-nymphsx27-tea-party-136909/], and <Before the Sky<#bcf>>[https://pixabay.com/music/fantasy-dreamy-childrens-before-the-sky-sheds-a-tear-130973/] by GeoffHarvey for Pixabay. <Circus<#bcf>>[https://pixabay.com/music/amusement-park-circus-145017/] by MusicForVideos for Pixabay." ;
      : print "✤ <^b^Fonts:<#9ae>> <Envious<#bcf>>[https://damieng.com/typography/zx-origins/envious/] <and<#9ae>> <Alagard<#bcf>>[https://www.dafont.com/alagard.font]" ;
   }

}

#########################
## SUBROUTINES
#########################

subroutines {
   
   sound_toggle : subroutine {
      : ask_permission ask_again_and_again = "true" category = "sound" ;
         : if (!sysvar_bool "sysvar_sound_enabled") {
            : stop_music ;
            : print "<Sound>[sound] is turned <^b^OFF>." ;
            : done ;
         }
      : ask_permission ask_again_and_again = "true" category = "music" ;
      : if (!sysvar_bool "sysvar_music_enabled") {
         : stop_music ;
         : print "<Sound>[sound] is turned <^b^ON>. <Music>[music] is turned <^b^OFF>." ;
         : done ;
      }
      : print "<Music>[music] is turned <^b^ON>." ;
      // : print "<Music>[music] is turned <^b^ON>.\n<This music is \"Field Theme\" by SVL.<#9ae>>[https://svl.itch.io]" ;
      : gosub "song" ;
      : done ;
   }
   music_toggle : subroutine {
      : if (!sysvar_bool "sysvar_sound_enabled") {
         : ask_permission ask_again_and_again = "true" category = "sound" ;
         : if (!sysvar_bool "sysvar_sound_enabled") {
            : print "<Sound>[sound] is turned <^b^OFF>." ;
            : done ;
         }
      }
      : ask_permission ask_again_and_again = "true" category = "music" ;
      : if (!sysvar_bool "sysvar_music_enabled") {
         : print "<Sound>[sound] is turned <^b^ON>. <Music>[music] is turned <^b^OFF>." ;
         : done ;
      }
      : print "<Music>[music] is turned <^b^ON>.\nThis music is \"Field Theme\" by SVL." ;
      : gosub "song" ;
      : done ;
   }
   song : subroutine {
      : if (is_at "enchanted_zone" || is_at "path_zone") {
         : play_music "music_nymphs" ;
      }
      : else_if (is_at "circus_zone") {
         : play_music "music_circus" ;
      }
      : else_if (is_at "loc_tower" || is_at "loc_towertop") {
         : play_music "music_sky" ;
      }
      : else_if (is_at "loc_witch" || is_at "loc_graveyard") {
         : play_music "music_tinkerbelle" ;
      }
      // : else_if (is_at "path_zone") {
      //    : play_music "music_spring" ;
      // }
      : else {
         : play_music "music_celtic" ;
      }
   }
   pickup : subroutine {
      : if (has_taken (s1())) {
         : get object -> (s1()) quiet="false" ;
         : print ("You pick the "+d(s1())+" back up.") ;
         : done ;
      }
      ## NOTE: 'pocket' is similar to 'get,' with some important differences. See section 3.72 of the documentation for details.
      // : pocket object -> (s1()) ;
      : get object -> (s1()) quiet="true" ;
      : success ;
      // : play_incidental "incidental_pickup" ;
      : if (s1_has_trait "t_ingredient") {
         : print ("<^b^You have picked up a new ingredient!> \n You now have "+d(s1())+".") graphic="icon_ingredients" ;
      }
      : if (s1_has_trait "t_item") {
         : print ("<^b^You have picked up a new item!> \n You now have "+d(s1())+".") graphic="icon_items" ;
      }
      : if (s1_has_trait "t_food") {
         : print ("<^b^You have picked up a new food item!> \n You now have "+d(s1())+".") graphic="icon_food" ;
      }
      : done ;
   }
   discover : subroutine {
      : decrement "clues_remain" ;
      : press_any_key ;
      : print "^c^^b^<•<#78c>> <+<#89d>> <N<#9ae>><E<#abf>><W<#bcf>> <C<#9ae>><L<#abf>><U<#bcf>><E<#9ae>><!<#9ae>> <+<#89d>> <•<#78c>>" ;
      : success ;
   }
   achievement : subroutine {
      : press_any_key ;
      : print "^c^^b^<•<#78c>> <+<#89d>> <A<#9ae>><C<#abf>><H<#bcf>><I<#9ae>><E<#abf>><V<#bcf>><E<#9ae>><M<#abf>><E<#bcf>><N<#9ae>><T<#abf>> <+<#89d>> <•<#78c>>" ;
      : success ;
   }
   traveling : subroutine {
      : print "^c^^b^Traveling..." ;
      : pause "800" ;
      : print "^c^^b^......" ;
      : pause "800" ;
      : print "^c^^b^..." ;
      : pause "800" ;
   }
   view_help : subroutine {
      : clear_screen hide_status_bar = "true" ;
      : print "\n" ;
      : print "\n^c^^b^<•<#78c>> <+<#89d>> <G<#9ae>><U<#abf>><I<#bcf>><D<#9ae>><E<#abf>><:<#bcf>> <+<#89d>> <•<#78c>>\n\n" ;
      : add_choice "Movement" {
         : print "Each location will list the directions you can move in." ;
         : print "<To move to a new location, type...<#000>>" ;
         : print "^n^- <^b^N> (or NORTH)\n- <^b^E> (or EAST)\n- <^b^S> (or SOUTH)\n- <^b^W> (or WEST)\n- <^b^ENTER> or <^b^EXIT>^m^" ;
         : print "<To travel to a place you've been before, type TRAVEL TO LOCATION. For example...<#000>>\n- TRAVEL TO BRIDGE" ;
         : print "<To refresh a location to see its description, type...<#000>>" ;
         : print "- LOOK" ;
         : press_any_key ;
         : gosub "view_help" ;
      }
      : add_choice "Basic commands" {
         : print "<Examine a character or item:<#000>>" ;
         : print "^n^- X OBJECT (or EXAMINE OBJECT)\n- SMELL OBJECT\n- TASTE OBJECT^m^" ;
         : print "<Interact with a character:<#000>>" ;
         : print "^n^- TALK TO CHARACTER\n- GIVE OBJECT TO CHARACTER^m^" ;
         : print "<Add an item to your inventory:<#000>>" ;
         : print "- GET OBJECT" ;
         : print "<Remove an item from your inventory:<#000>>" ;
         : print "- DROP OBJECT" ;
         : print "<Other actions that may be useful:<#000>>" ;
         : print "- CLIMB, DIG, OPEN\n" ;
         : press_any_key ;
         : gosub "view_help" ;
      }
      : add_choice "What is going on?" {
         : print "Tonight is the Midsummer's Eve Treasure Hunt.\nEvery summer, the 13-year-old children of the town compete to find the Midsummer Treasure. This is your year to compete!\nTo find the treasure, you'll have to find the 12 clues hidden around the town. The clues will lead you to the treasure - the Golden Crown, and a chance to ask the mayor for any favor you want." ;
         : press_any_key ;
         : gosub "view_help" ;
      }
      : add_choice "Sound/Music" {
         : print "To turn the sound (or music) on or off, just type SOUND." ;
         : press_any_key ;
         : gosub "view_help" ;
      }
      : add_choice "Hints" {
         : print "When you run into characters in the game, you can ask them for hints. They'll tell you a hint for a random clue that they've discovered. As time goes on, each character will find more and more clues." ;
         : press_any_key ;
         : gosub "view_help" ;
      }
      : add_choice "(Return to {current_location})" {: redescribe ; : done ;}
      : choose hint = "default" ;
   }
   view_clues : subroutine {
      : print "^c^^b^<•<#78c>> <+<#89d>> <C<#9ae>><L<#abf>><U<#bcf>><E<#9ae>><S<#abf>><:<#abf>> <+<#89d>> <•<#78c>>\n\n" ;
      : iterate "_inventory" filter-> (item_has_trait "t_clue") {
         :print (emsg(item())) ;
      }
   }
   
   update_inventory : subroutine {
      : clear "inventory_ingredients" ;
      : iterate "_inventory" filter-> (item_has_trait "t_ingredient") {
         : collection_push { collection = "inventory_ingredients" item -> ( item() ) }
      }
      : clear "inventory_food" ;
      : iterate "_inventory" filter-> (item_has_trait "t_food") {
         : collection_push { collection = "inventory_food" item -> ( item() ) }
      }
      : clear "inventory_items" ;
      : iterate "_inventory_notworn" filter-> (item_has_trait "t_item" ) {
         : collection_push { collection = "inventory_items" item -> ( item() ) }
      }
      : clear "inventory_worn" ;
      : iterate "_inventory_worn" {
         : collection_push { collection = "inventory_worn" item -> ( item() ) }
      }
   }

   ##### END THE GAME #####

   end_game_request : subroutine {
      : local "convo1" ;
      : local "convo2" ;
      : local "convo3" ;
      : if (!convo1) {
         : add_choice "Make me the new mayor." {
            : print "\"Maybe when you're 35, youngin'!\" says the mayor. \"What else?\"" category="dark" ;
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "end_game_request" ;
         }
      }
      : if (!convo2) {
         : add_choice "Start a new festival for Midwinter's Eve." {
            : print "\"Oh ho ho, good one, kid!\" says the mayor. \"But let's be serious.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "end_game_request" ;
         }
      }
      : if (!convo3) {
         : add_choice "Return the valuables you stole!" {
            : if (mystery_clues > 2) {
               : print "The crowd gasps, and everyone looks at the mayor in surprise." ;
               : pause "1600" ;
               : print "\"Ha!\" the mayor laughs and slaps you on the back. \"Hilarious!\"" category="dark" ;
               : pause "1600" ;
               : print "\"It's true!\" you shout. \"I have evidence to prove it!\"" ;
               : pause "1200" ;
               : print "The mayor looks at you nervously, and sees that you're serious. After a moment, he runs into his house and shuts the door. But he won't get away with his crimes, you'll make sure of it." ;
               : gosub "achievement" ;
               : print "^c^Caught the mayor" ;
               : set_true "achievement_caught_the_mayor" ;
               : return ;
            }
            : else {
               : print "The crowd gasps, and everyone looks at the mayor in surprise." ;
               : pause "1600" ;
               : print "\"Ha!\" the mayor laughs and slaps you on the back. \"Don't you worry, kid, we'll find the real thief soon.\"" category="dark" ;
               : press_any_key ;
               : print "Sadly, you didn't collect enough evidence to convince the crowd that they mayor is guilty." ;
               : press_any_key ;
               : set_true "convo3" ;
               : gosub "end_game_request" ;
            }
         }
      }
      : add_choice "Give me a pet chicken." {
         : print "The mayor nods in agreement and shakes your hand. \"Great job,\" he says as the crowd gives their applause." ;
         : gosub "achievement" ;
         : print "^c^New pet chicken" ;
         : set_true "achievement_new_pet_chicken" ;
         : return ;
      }
      : choose "\"So what will it be?\" the mayor prompts you." ;
   }

   list_achievements : subroutine {
      : print "\n" ;
      : print "{achievements}" ;
      : press_any_key ;
      : add_choice "^n^Restart" {
         : print "^n^^c^You are suddenly whisked back to the beginning..." ;
         : win_game ;
      }
      : add_choice "^n^End game" {
         : redescribe ;
      }
      : choose ;
   }

   ###################################
   # EVENT SUBROUTINES
   ###################################

   ## PLAY GAMES
   play_games : subroutine {
      : add_choice "Darts" {
         : if (has_taken "plush_toy") {
            : print "You got what you needed from playing darts. You'll let others have a turn." ;
            : done ;
         }
         : print "You head over to the darts." ;
         : pause "1000" ;
         : goto "loc_darts" ;
         : redescribe ;
         }
      : add_choice "Magic Number" {
         : if (has_visited "loc_number") {
            : goto "loc_number" ;
            : redescribe ;
         }
         : add_choice "Yep!" {
            : goto "loc_number" ;
            : redescribe ;
         }
         : add_choice "No thanks." {
            : gosub "play_games" ;
         }
         : choose "This game is just for fun, there are no clues involved. Do you still want to play?" ;
      }
      : add_choice "Wheel of Fortune" {
         : if (has_visited "loc_fortune") {
            : goto "loc_fortune" ;
            : redescribe ;
         }
         : add_choice "Yep!" {
            : print "You head over to the wheel of fortune." ;
            : pause "1000" ;
            : goto "loc_fortune" ;
            : redescribe ;
         }
         : add_choice "No thanks." {
            : gosub "play_games" ;
         }
         : choose "This game is just for fun, there are no clues involved. Do you still want to play?" ;
      }
      : add_choice "Nevermind." ;
      : choose "Which game would you like to play?" ;
   }
   ## GET CIRCUS PRIZES
   get_circus_prize : subroutine {
      : cycle key="circus_prizes" predictable_order="false" skip_interval="0" {
         : create "circus_mug" ;
         : create "circus_shirt" ;
         : create "flower_crown" ;
         : create "clown_nose" ;
         : create "balloon_animal" ;
      }
   }
   ## PLAY WHEEL OF FORTUNE
   play_fortune : subroutine {
      : if (points >= 500) {
         : print "\"Incredible!\" the attendant says excitedly. \"You made it to {points} points! Well done.\"" category="dark" ;
         : if (!achievement_won_wheel_fortune) {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Mastered the wheel of fortune" ;
            : set_true "achievement_won_wheel_fortune" ;
         }
         : pause "1200" ;
         : print "\"Here's a prize for you.\"" category="dark" ;
         : press_any_key ;
         : set_true "stop_playing_fortune" ;
         : gosub "get_circus_prize" ;
         : redescribe ;
      }
      : print "You have {points} points." ;
      : ask_int question="How many points do you want to bet?" var="bet" min="0" max="5000000" ;
      : if (bet == 0) {
         : print "\"Okay, come back if you want to try again later!\"" category="dark" ;
         : press_any_key ;
         : set_true "stop_playing_fortune" ;
         : goto "loc_circus2" ;
         : redescribe ;
      }
      : if (bet > points) {
         : print "You don't have {bet} points to bet." ;
         : press_any_key ;
         : gosub "play_fortune" ;
      }
      : add_choice "Red" {
         : set_true "bet_on_red" ;
         : gosub "play_fortune_result" ;
      }
      : add_choice "Blue" {
         : set_false "bet_on_red" ;
         : gosub "play_fortune_result" ;
      }
      : add_choice "I'm done playing." {
         : print "\"The attendant nods at you.\"" ;
         : pause "1200" ;
         : set_true "stop_playing_fortune" ;
         : goto "loc_circus2" ;
         : redescribe ;
      }
      : choose "Bet on red or blue?" ;
   }
   play_fortune_result : subroutine {
      : execute_one_at_random {
         : set_true "landed_on_red" ;
         : set_false "landed_on_red" ;
      }
      : print "The spinner spins..." ;
      : pause "500" ;
      : print "..." ;
      : pause "500" ;
      : print "..." ;
      : pause "500" ;
      : print "...and lands on {landed_on_red ? `red`:`blue`}!" ;
      : press_any_key ;
      : if (bet_on_red == landed_on_red) {
         : set_integer var="points" (points + bet) ;
      }
      : if (bet_on_red != landed_on_red) {
         : set_integer var="points" (points - bet) ;
      }
      : gosub "play_fortune" ;
   }

   ## GUESS THE NUMBER
   play_magic_number : subroutine {
      : store_random "random" ;
      : set_integer var="random" (random + 1) ;
      : set_integer var="attempts" value="6" ;
      : ask_int question="Guess a number between 1 and 100." var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
      : ask_int question="New guess?" var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
      : ask_int question="New guess?" var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
      : ask_int question="New guess?" var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
      : ask_int question="New guess?" var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
      : ask_int question="New guess?" var="temp_int" min="1" max="100" ;
      : gosub "check_guess" ;
   }
   check_guess : subroutine {
      : decrement "attempts" ;
      : if (temp_int == random) {
         : print "\"You got it! I'm impressed!\" the mathematician says." category="dark" ;
         : if (!achievement_won_magic_number) {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Guessed the magic number" ;
            : set_true "achievement_won_magic_number" ;
         }
         : pause "1200" ;
         : print "The mathematician hands you a prize." ;
         : press_any_key ;
         : goto "loc_circus2" ;
         : gosub "get_circus_prize" ;
         : redescribe ;
      }
      : else_if (attempts == 0) {
         : print "Time's up! You didn't guess it in 6 turns. Maybe next time!" ;
         : press_any_key ;
         : goto "loc_circus2" ;
         : redescribe ;
      }
      : else_if (temp_int > random) {
         : print "<The magic number is<#000>> <^b^lower.<#000>>" ;
      }
      : else {
         : print "<The magic number is<#000>> <^b^higher.<#000>>" ;
      }
      : return ;
   }

   ## BUY FOOD FROM SAMMYS
   buy_food : subroutine {
      : disambiguate_s1 "universal" ;
      # This makes it so the player can't order another hotdog if they already have on in their inventory. They have to eat or drop the hotdog first.
      : if (is_carried (s1())) {
         : print ("\"It looks like you already have {a_or_some} "+(d(s1()))+". Perhaps you should eat that first,\" says Sammy.") category="dark";
      }
      # This part makes it so the player can customize their food with a topping. The only toppings that matter are lime for popcorn, and pickles for the hotdog. Anything else doesn't have an effect.
      : else_if (subject1_is "hotdog" || subject1_is "pizza" || subject1_is "popcorn" || subject1_is "candy_apple") { 
         # The only sentence structure that works is "buy hotdog with pickles," so this part tells the player to re-write their sentence in that format.
         : if (!preposition_is "with") {
            # The candy apple gets its own section or else Sammy will say "candy_apple" instead of "candy apple."
            : if (subject1_is "candy_apple") {
               : print ("\"To order a candy apple, let me know the topping by saying <^b^BUY CANDY APPLE WITH SPRINKLES>, for example. One topping per item, please,\" says Sammy.") category="dark";
            }
            : else {
               : print ("\"To order {a_or_some} "+s1()+", let me know the topping by saying <^b^BUY "+upper(s1())+" WITH SPRINKLES>, for example. One topping per item, please,\" says Sammy.") category="dark";
            }
            : done ;
         }
         # This part re-writes the name and description for the food items based on the topping the player asks for.
         : if (subject1_is "hotdog") {
            : set_string var="hotdog_name" ("hotdog with "+original "noun2") ;
               # This adds the pickle trait to the hotdog. Otherwise the dog won't eat it.
               : if (noun2_is "pickle" || noun2_is "pickles") {
                  : add_trait subject="hotdog" trait="t_pickles" ;
               }
         }
         : else_if (subject1_is "popcorn") {
            : set_string var="popcorn_name" ("popcorn with "+original "noun2") ;
               # This adds the lime trait to the popcorn. Otherwise the fishing activity won't work.
               : if (noun2_is "lime") {
                  : add_trait subject="popcorn" trait="t_lime" ;
               }
         }
         : else_if (subject1_is "pizza") {
            : set_string var="pizza_name" ("pizza with "+original "noun2") ;
         }
         : else {
            : set_string var="apple_name" ("candy apple with "+original "noun2") ;
         }
         : print "\"Coming right up!\" says Sammy." category="dark" ;
         : print ("You watch as he whips up your "+d(s1())+". When he's finished, he puts it on the counter.") ;
         : create (s1()) ;
      }
      : else_if (noun1_is "news" || noun1_is "newspaper") {
         : print "You don't need to buy a newspaper, you can read the one on display." ;
      }
      : else_if (noun1_is "book" || noun1_is "magazine") {
         : print ("You don't have time to read a "+original "noun1"+"!");
      }
      : else {
         : print "You can't buy that here." ;
      }
   }

   ## READ THE HEADSTONES ##### blessed , 1-free, loved
   read_headstones : subroutine {
      : add_choice "The first stone." {
         : print "^n^<Mary Mildred Macbeth, 1804-1843<#000>>\n<Free from pain, may she Rest in Peace<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "The second stone." {
         : print "^n^<Isabella Rose Montgomery, 1851-1851<#000>>\n<Beloved daughter and sister, Forever in our Hearts<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "The third stone." {
         : print "^n^<Edward Grover Whitaker, 1821-1829<#000>>\n<Blessed for eternity, Forever our perfect son<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "The fourth stone." {
         : print "^n^<Charles W. Cunningham, 1787-1839<#000>>\n<Respected teacher and mentor, his Wisdom lives on in us<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "The fifth stone." {
         : print "^n^<Margaret E. Hamilton, 1795-1855<#000>>\n<Loving wife and Devoted mother, a life filled with Love and Grace<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "The sixth stone." {
         : print "^n^<Sophia Louise Montgomery, 1836-1856<#000>>\n<Loved by all, her memory will shine Forever<#015>>^m^" ;
         : press_any_key ;
         : gosub "read_headstones" ; 
      }
      : add_choice "Read all of the stones." {
         : print "^n^<^b^First stone:<#000>> <Mary Mildred Macbeth, 1804-1843<#000>>\n<She is now Free with the Angels<#015>>^m^" ;
         : print "^n^<^b^Second stone:<#000>> <Isabella Rose Montgomery, 1851-1851<#000>>\n<Beloved daughter and sister, Forever in our Hearts<#015>>^m^" ;
         : print "^n^<^b^Third stone:<#000>> <Edward Grover Whitaker, 1821-1829<#000>>\n<Blessed for eternity, Forever our perfect son<#015>>^m^" ;
         : print "^n^<^b^Fourth stone:<#000>> <Charles W. Cunningham, 1787-1839<#000>>\n<Respected teacher and mentor, his Wisdom lives on in us<#015>>^m^" ;
         : print "^n^<^b^Fifth stone:<#000>> <Margaret E. Hamilton, 1795-1855<#000>>\n<Loving wife and Devoted mother, a life filled with Love and Grace<#015>>^m^" ;
         : print "^n^<^b^Sixth stone:<#000>> <Sophia Louise Montgomery, 1836-1856<#000>>\n<Loved by all, her memory will shine Forever<#015>>^m^" ;
      }
      : add_choice "I'm done reading." ;
      : choose "Which headstone would you like to read?" ;
      : done ;
   }

   ## POTION BREWING AT THE WITCH'S CAULDRON
   update_cauldron : subroutine {
      : clear "cauldron_contains" ;
      : if (cauldron_ingredients == 0) {
         : set_string var="cauldron_desc" value="It's a sturdy, well-used cauldron. There's nothing in it right now." ;
      }
      : else {
         : iterate "in_the_cauldron" filter -> ( item_has_trait "t_ingredient" ) {
            : collection_push { collection = "cauldron_contains" item -> ( d(item()) ) }
         }
         : set_string var="cauldron_desc" value-> ("The cauldron contains "+construct_string {
                     from      -> ("cauldron_contains")
                     sep       -> (", ")
                     final_sep -> (", and ")
                  }+".") ;
      }
   }
   cauldron_addition : subroutine {
      : if (has_trait {subject -> (s1()) trait="t_in_cauldron"}) {
         : print ("You have already added "+d(s1())+" to the cauldron.") ;
         : done ;
      }
      : if (!has_trait {subject -> (s1()) trait="t_ingredient"}) {
         : print ("You can't add that to the cauldron; it's not a potion ingredient.") ;
         : done ;
      }
      : if (cauldron_ingredients == 3) {
         : print "The cauldron already contains three ingredients." ;
         : done ;
      }
      : if (!is_present {object -> (s1())}) {
         : print ("You don't have "+d(s1())+"!");
         : done ;
      }
      : print ("You add the "+d(s1())+" to the cauldron.") graphic="icon_cauldron";
      : success ;
      : add_trait subject -> (s1()) trait="t_in_cauldron";
      : create entity -> (s1()) target="in_the_cauldron" ;
      : increment "cauldron_ingredients" ;
      : if (cauldron_ingredients == 3) {
         : gosub "cauldron_brew" ;
      }
   }
   cauldron_remove : subroutine {
      : print ("You take the "+d(s1())+" out of the cauldron.") ;
      : decrement "cauldron_ingredients" ;
      : remove_trait subject -> (s1()) trait="t_in_cauldron";
      : create entity -> (s1()) target="inventory" ;
   }
   cauldron_brew : subroutine {
      : print "<Suddenly, the contents of the cauldron begin to swirl, forming a liquid-like substance made of magic...<#fff>>" ;
      : press_any_key ;
      ## Create the purple potion
      : if (has_trait {subject="aster" trait="t_in_cauldron"} && has_trait {subject="pansies" trait="t_in_cauldron"} && has_trait {subject="webcap" trait="t_in_cauldron"}) {
         : print "You brewed a purple potion!" graphic="icon_potion" ;
         : success ;
         : press_any_key ;
         : create "purple_potion" ;
         : gosub "empty_cauldron" ;
         : done ;
      }
      ## Create perfume (just for fun, not necessary to win the game)
      : else_if (has_trait {subject="daisy" trait="t_in_cauldron"} && has_trait {subject="torch_lily" trait="t_in_cauldron"} && has_trait {subject="tulip" trait="t_in_cauldron"}) {
         : print "You brewed some perfume!" graphic="icon_potionb" ;
         : if (achievement_brewed_perfume) {
            : success ;
         }
         : else {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Brewed a floral perfume" ;
            : set_true "achievement_brewed_perfume" ;
         }
         : press_any_key ;
         : create "perfume" ;
         : gosub "empty_cauldron" ;
         : done ;
      }
      ## Create fire potion (just for fun, not necessary to win the game)
      : else_if (has_trait {subject="bolete" trait="t_in_cauldron"} && has_trait {subject="torch_lily" trait="t_in_cauldron"} && has_trait {subject="tulip" trait="t_in_cauldron"}) {
         : print "You brewed liquid fire!" graphic="icon_potiony" ;
         : if (achievement_brewed_liquid_fire) {
            : success ;
         }
         : else {
            : pause "1600" ;
            : gosub "achievement" ;
            : print "^c^Brewed liquid fire" ;
            : set_true "achievement_brewed_liquid_fire" ;
         }
         : press_any_key ;
         : create "liquid_fire" ;
         : gosub "empty_cauldron" ;
         : done ;
      }
      ## The ingredients didn't make anything
      : print "...nothing happens." ;
      : press_any_key ;
      : gosub "empty_cauldron" ;
   }
   empty_cauldron : subroutine {
      : set_integer var = "cauldron_ingredients"  value = "0" ;
      : iterate "t_in_cauldron" {
         : remove_trait subject -> (item()) trait = "t_in_cauldron" ;
         : create entity -> (item()) target="inventory";
      }
   }

   ###################################
   # CONVO SUBROUTINES # CONVERSATIONS
   ###################################

   ## ASK OTHER PLAYERS FOR CLUES
   ask_for_clues : subroutine {
      : if (temp_int == 0) {
         : print ("\"I haven't found anything yet, but "+collection_get { collection -> ("clues_list_start") index -> (random(5))}+",\" says {temp_name}") category="dark";
      }
      : else_if (temp_int <= 5) {
         : execute_one_at_random {
            : print ("{temp_name} gives you a hint: \""+collection_get { collection -> ("clues_list1") index -> (random(temp_int))}+"\"") category="dark";
            : print ("{temp_name} gives you a hint: \""+collection_get { collection -> ("clues_list2") index -> (random(temp_int))}+"\"") category="dark"; 
            : print ("\""+collection_get { collection -> ("clues_list_start") index -> (random(5))}+",\" says {temp_name}") category="dark"; 
         }
      }
      : else_if (temp_int <= 11) { 
         : execute_one_at_random {
            : print ("{temp_name} gives you a hint: \""+collection_get { collection -> ("clues_list1") index -> (random(12))}+"\"") category="dark";
            : print ("{temp_name} gives you a hint: \""+collection_get { collection -> ("clues_list2") index -> (random(12))}+"\"") category="dark";
            : print ("{temp_name} gives you a hint: \""+collection_get { collection -> ("clues_list3") index -> (random(12))}+"\"") category="dark";
         }
      }
      : else {
         : print "\"I'm on my way to tell Alba the password!\" says {temp_name}" ;
      }
   }

   ## TALK TO ALBA
   talk_alba : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : if (!convo1) {
         : add_choice "How are you doing?" {
            : print "\"I'll be honest, I wish I was at the circus with everyone else! But it's very important to share the news with out-of-towners.\"" category="dark" ;
            : press_any_key ;
            : add_choice "What's so important about the news?" {
               : print "\"Someone has been stealing the town's valuables! Didn't you read the newspaper?\" Alba sighs. \"Kids these days!\"" category="dark" ;
               : press_any_key;
               : set_true "learned_about_mystery" ;
               : set_true "convo1" ;
               : gosub "talk_alba" ;
            }
            : choose ;
         }
      }
      : if (learned_about_mystery && !mayor_isnt_serious) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "\"We have good people in this town. I just don't know who would do such a thing. The mayor isn't taking this situation seriously enough!\"" category="dark" ;
            : press_any_key ;
            : set_true "mayor_isnt_serious" ;
            : gosub "talk_alba" ;
         }
      }
      : if (mayor_isnt_serious && !no_investigation) {
         : add_choice "Do you think the mayor is suspicious?" {
            : print "\"Well, now that you mention it... He has refused to start an investigation into the missing valuables... Which is very suspicious.\"" category="dark" ;
            : press_any_key ;
            : set_true "no_investigation" ;
            : increment "mystery_clues" ;
            : gosub "talk_alba" ;
         }
      }
      : if (is_carried "necklace" && !convo3) {
         : add_choice "Is this your necklace?" {
            : print "\"No, dear, that's your grandmother's necklace! You silly child, did you forget you borrowed it?\"" category="dark" ;
            : press_any_key ;
            : set_true "convo3" ;
            : gosub "talk_alba" ;
         }
      }
      : if (is_carried "ring" && !convo4) {
         : add_choice "Is this your necklace?" {
            : print "\"Sorry, I don't recognize that.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo4" ;
            : gosub "talk_alba" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : print "\"Hmmm,\" Alba taps her finger on her chin, \"I did see someone on the top of the tower earlier today.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_alba" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }
   ## TALK TO GRANDMA
   talk_grandma : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : if (!convo1) {
         : add_choice "How are you doing, grandma?" {
            : print "\"It's a beautiful summer night. I love to hear the music coming from the circus.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "talk_grandma" ;
         }
      }
      : if (learned_about_mystery && !customer_stole_necklace) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "\"Well, my necklace went missing from this very flower stand! It must have been a customer.\"" category="dark" ;
            : press_any_key ;
            : set_true "customer_stole_necklace" ;
            : gosub "talk_grandma" ;
         }
      }
      : if (customer_stole_necklace && !returned_necklace && !convo3) {
         : add_choice "Someone stole your necklace?" {
            : print "\"Just this very evening. I noticed it was missing after the mayor picked up a bouquet for his wife.\"" category="dark" ;
            : press_any_key ;
            : increment "mystery_clues" ;
            : set_true "convo3" ;
            : gosub "talk_grandma" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : print "\"Nobody tells anything important to little old ladies!\"" category="dark" ;
            : print "\"But...\" she leans in conspiratorially. \"I think some pansies might come in handy.\"" category="dark";
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_grandma" ;
         }
      }
      : if (is_carried "necklace") {
         : add_choice "Is this your necklace?" {
            : print "\"Oh, thank heavens! I was worried that someone had stolen it. Did you borrow it, dear?\"" category="dark" ;
            : if (!achievement_returned_necklace) {
               : pause "1600" ;
               : gosub "achievement" ;
               : print "^c^Returned the stolen necklace" ;
               : set_true "achievement_returned_necklace" ;
            }
            : press_any_key ;
            : destroy "necklace" ;
            : set_true "returned_necklace" ;
            : gosub "talk_grandma" ;
         }
      }
      : if (is_carried "ring" && !convo4) {
         : add_choice "Is this your ring?" {
            : print "\"Sorry, I don't recognize that.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo4" ;
            : gosub "talk_grandma" ;
         }
      }
      : add_choice "Goodbye." {
         : print "You give grandma a big hug. She pecks you on the cheek." ;
      }
      : choose ;
   }
   ## TALK TO SAMMY
   talk_sammy : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : local "convo5" ;
      : add_choice "Can I have some food?" {
         : print "\"Sure thing! Just <ORDER<#000>> something from the menu, and it'll be right out.\"" category="dark" ;
         : press_any_key ;
         : gosub "talk_sammy" ;
      }
      : if (learned_about_mystery && !convo3) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "Sammy scratches his beard. \"I haven't noticed anything missing.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo3" ;
            : gosub "talk_sammy" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : print "\"I do know one thing: The pizza and candy apples won't lead you to any clues. But you could always give them to someone special!\"" category="dark" ;
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_sammy" ;
         }
      }
      : if (is_carried "necklace" && !convo5) {
         : add_choice "Is this your necklace?" {
            : print "\"Sorry, I don't recognize that.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo5" ;
            : gosub "talk_sammy" ;
         }
      }
      : if (is_carried "ring" && !convo4) {
         : add_choice "Is this your ring?" {
            : print "\"Sorry, I don't recognize that.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo4" ;
            : gosub "talk_sammy" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }
   ## TALK TO MAYOR
   talk_mayor : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation with the mayor is started.
      : local "convo2" ;
      : local "convo3" ;
      : if (!convo1) {
         : add_choice "Can you tell me more about Midsummer's Eve?" {
            : print "The mayor sighs. \"This is no time for history lessons, child!\"" category="dark";
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "talk_mayor" ;
         }
      }
      : if (!convo2) {
         : add_choice "Can you tell me more about the annual treasure hunt?" {
            : print "The mayor glances at his pocket watch. \"Perhaps you could ask your grandmother,\" he offers." category="dark";
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_mayor" ;
         }
      }
      : add_choice "What are the rules of the treasure hunt?" {
         : print "\"You may not take clues from other treasure hunters.\"" category="dark";
         : pause "1200" ;
         : print "\"You may not enter into any buildings.\"" category="dark";
         : pause "1200" ;
         : print "\"You may not spy on anyone. Especially me!\"" category="dark";
         : press_any_key ;
         : gosub "talk_mayor" ;
      }
      : if (!convo3) {
         : add_choice "Do you have any treasure hunt clues?" {
            : print "\"That would be against the rules!\" the mayor says forcefully." category="dark" ;
            : pause "1600" ;
            : print "\"Well, the unwritten rules,\" he amends." category="dark" ;
            : press_any_key ;
            : gosub "talk_mayor" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }
   ## TALK TO WITCH
   talk_witch : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : local "convo5" ;
      : local "convo6" ;
      : if (!convo1) {
         : add_choice "What are you doing?" {
            : print "\"Don't ask questions you don't want the answers to,\" the witch says while wagging a finger at you." category="dark" ;
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "talk_witch" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : if (has_not_created "frog") {
               : print "\"No... but I can trade you for a very special gift! Bring me a potion.\"" category="dark" ;
               : if (is_present "purple_potion") {
                  : add_choice "[[Give the witch the potion]]" {
                     : print "\"Oooh,\" the witch claps her hands with delight, \"what a lovely potion. In exchange, I bestow this frog.\"" category="dark" ;
                     : success ;
                     : create "frog" ;
                     : destroy "purple_potion" ;
                     : done ;
                  }
                  : add_choice "What will you give me for the potion?" {
                     : print "The witch taps her lip with a long crooked finger. \"We shall see, we shall see.\"" category="dark" ;
                     : press_any_key ;
                     : gosub "talk_witch" ;
                  }
                  : add_choice "Goodbye." ;
                  : choose ;
               }
            }
            : else_if (is_beside "frog") {
               : print "\"Be gone with you, child, and take the frog with you.\"" category="dark" ;
            }
            : else {
               : print "\"Be gone with you, child, there's nothing here for you.\"" category="dark" ;
            }
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_witch" ;
         }
      }
      : if (!convo3) {
         : add_choice "How do I make a potion?" {
            : print "\"It's simple, young one, you add three ingredients to the cauldron.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo3" ;
            : gosub "talk_witch" ;
         }
      }
      : if (learned_about_mystery && !convo4) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "\"I don't involve myself in the affairs of the mayor.\"" category="dark" ;
            : press_any_key ;
            : increment "mystery_clues" ;
            : set_true "convo4" ;
            : gosub "talk_witch" ;
         }
      }
      : if (is_carried "necklace" && !convo5) {
         : add_choice "Is this your necklace?" {
            : print "\"Do I look like I would wear a necklace?\"" category="dark" ;
            : press_any_key ;
            : set_true "convo5" ;
            : gosub "talk_witch" ;
         }
      }
      : if (is_carried "ring" && !convo6) {
         : add_choice "Is this your ring?" {
            : print "\"That's the fairy's ring.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo6" ;
            : gosub "talk_witch" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }
   ## TALK TO FAIRY
   talk_fairy : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : if (!convo1) {
         : add_choice "What are you doing?" {
            : print "\"I'm watching my frogs. Lily and Charming are eating bugs, and Tad is relaxing on a lily pad.\" The fairy sighs. \"I just love them.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "talk_fairy" ;
         }
      }
      : if (learned_about_mystery && !convo3) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "\"Oh, it's not just my ring, then? That makes me feel a bit better.\" the fairy sighs." category="dark" ;
            : press_any_key ;
            : set_true "convo3" ;
            : set_true "stolen_ring" ;
            : gosub "talk_fairy" ;
         }
      }
      : if (stolen_ring && !returned_ring && !convo4) {
         : add_choice "Someone stole your ring?" {
            : print "\"The frogs told me it was a tall man with a mustache who took it!\"" category="dark" ;
            : press_any_key ;
            : increment "mystery_clues" ;
            : set_true "convo4" ;
            : gosub "talk_fairy" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : if (has_not_created "clue_8") {
               : print "\"I might have a clue for you... but I'll require something in return.\" The fairy flashes a mischievous grin." category="dark" ;
            }
            : else {
               : print "\"No more clues, sorry!\"" category="dark" ;
            }
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_fairy" ;
         }
      }
      : if (is_carried "necklace" && !convo5) {
         : add_choice "Is this your necklace?" {
            : print "\"I believe I have seen your grandmother wearing that exact necklace.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo5" ;
            : gosub "talk_fairy" ;
         }
      }
      : if (is_carried "ring") {
         : add_choice "Is this your ring?" {
            : print "\"Yes!\" the fairy exclaims, jumping up. \"Thank you so much for returning it! How did you get it back from the man with the mustache?\"" category="dark" ;
            : if (!achievement_returned_ring) {
               : pause "1600" ;
               : gosub "achievement" ;
               : print "^c^Returned the stolen ring" ;
               : set_true "achievement_returned_ring" ;
            }
            : press_any_key ;
            : destroy "ring" ;
            : set_true "returned_ring" ;
            : gosub "talk_fairy" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }
   ## TALK TO GRUMPY LITTLE MAN
   talk_man : subroutine {
      : local "convo1" ; // Acts as a temporary boolean for this conversation only. Will reset if a new conversation is started.
      : local "convo2" ;
      : local "convo3" ;
      : local "convo4" ;
      : local "convo5" ;
      : if (!convo1) {
         : add_choice "Why are you so grumpy?" {
            : print "\"I hate the Midsummer's Eve Treasure Hunt. You youngin's go gallivanting around, destroying everything around us.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo1" ;
            : gosub "talk_man" ;
         }
      }
      : if (learned_about_mystery && !convo3) {
         : add_choice "Who do you think is stealing the town valuables?" {
            : print "\"How dare you accuse me of such a thing!\" the man says angrily." category="dark" ;
            : press_any_key ;
            : set_true "convo3" ;
            : gosub "talk_man" ;
         }
      }
      : if (!convo2) {
         : add_choice "Do you have any treasure hunt clues?" {
            : print "The man glares at you without answering." category="dark" ;
            : press_any_key ;
            : set_true "convo2" ;
            : gosub "talk_man" ;
         }
      }
      : if (is_carried "necklace" && !convo5) {
         : add_choice "Is this your necklace?" {
            : print "\"No.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo5" ;
            : gosub "talk_man" ;
         }
      }
      : if (is_carried "ring" && !convo4) {
         : add_choice "Is this your ring?" {
            : print "\"No.\"" category="dark" ;
            : press_any_key ;
            : set_true "convo4" ;
            : gosub "talk_man" ;
         }
      }
      : add_choice "Goodbye." ;
      : choose ;
   }

   ############################
   # SUBROUTINES FOR OTHER TREASURE HUNTERS
   ############################

   intial_move : subroutine {

   }

}

#########################
# ASSETS
#########################

assets {

   ##### GRAPHICS #####
   graphics {
   
      intro : png "https://puzzle.grizel.in/midsummer/inline/intro.png" scaling_mode="pixel_art" ;
      map : png "https://puzzle.grizel.in/midsummer/inline/map.png" scaling_mode="pixel_art" {
      }
      
      ## LOCATION GRAPHICS
      loc_town1 : png "https://puzzle.grizel.in/midsummer/header/town1.jpg" scaling_mode="pixel_art" ;
      loc_town2 : png "https://puzzle.grizel.in/midsummer/header/town2.jpg" scaling_mode="pixel_art" ;
      loc_shops1 : png "https://puzzle.grizel.in/midsummer/header/shops1.jpg" scaling_mode="pixel_art" ;
      loc_shops2 : png "https://puzzle.grizel.in/midsummer/header/shops2.jpg" scaling_mode="pixel_art" ;
      loc_circus1 : png "https://puzzle.grizel.in/midsummer/header/circus1.jpg" scaling_mode="pixel_art" ;
      loc_circus2 : png "https://puzzle.grizel.in/midsummer/header/circus2.jpg" scaling_mode="pixel_art" ;
      loc_darts : png "https://puzzle.grizel.in/midsummer/header/darts.png" scaling_mode="pixel_art" ;
      loc_fortune : png "https://puzzle.grizel.in/midsummer/header/fortune.png" scaling_mode="pixel_art" ;
      loc_river1 : png "https://puzzle.grizel.in/midsummer/header/river1.jpg" scaling_mode="pixel_art" ;
      loc_river2 : png "https://puzzle.grizel.in/midsummer/header/river2.jpg" scaling_mode="pixel_art" ;
      loc_bridge : png "https://puzzle.grizel.in/midsummer/header/bridge.jpg" scaling_mode="pixel_art" ;
      loc_enchanted1 : png "https://puzzle.grizel.in/midsummer/header/river_enchanted1.jpg" scaling_mode="pixel_art" ;
      loc_witch : png "https://puzzle.grizel.in/midsummer/header/witch.jpg" scaling_mode="pixel_art" ;
      loc_graveyard : png "https://puzzle.grizel.in/midsummer/header/graveyard.jpg" scaling_mode="pixel_art" ;
      loc_mushrooms1 : png "https://puzzle.grizel.in/midsummer/header/mushrooms.jpg" scaling_mode="pixel_art" ;
      loc_mushrooms2 : png "https://puzzle.grizel.in/midsummer/header/mushrooms2.jpg" scaling_mode="pixel_art" ;
      loc_fairy : png "https://puzzle.grizel.in/midsummer/header/fairy.jpg" scaling_mode="pixel_art" ;
      loc_pathmagical : png "https://puzzle.grizel.in/midsummer/header/path_magical.jpg" scaling_mode="pixel_art" ;
      loc_path1 : png "https://puzzle.grizel.in/midsummer/header/path1.jpg" scaling_mode="pixel_art" ;
      loc_flowers : png "https://puzzle.grizel.in/midsummer/header/flowers.jpg" scaling_mode="pixel_art" ;
      loc_path2 : png "https://puzzle.grizel.in/midsummer/header/path2.jpg" scaling_mode="pixel_art" ;
      loc_tower : png "https://puzzle.grizel.in/midsummer/header/tower2.jpg" scaling_mode="pixel_art" ;
   
      ## INVENTORY GRAPHICS
      icon_potion : png "https://puzzle.grizel.in/midsummer/inline/potion.png" scaling_mode="pixel_art" ;
      icon_potionb : png "https://puzzle.grizel.in/midsummer/inline/potion-blue.png" scaling_mode="pixel_art" ;
      icon_potiony : png "https://puzzle.grizel.in/midsummer/inline/potion-yellow.png" scaling_mode="pixel_art" ;
      icon_ingredients : png "https://puzzle.grizel.in/midsummer/inline/ingredient.png" scaling_mode="pixel_art" ;
      icon_items : png "https://puzzle.grizel.in/midsummer/inline/item.png" scaling_mode="pixel_art" ;
      icon_cauldron : png "https://puzzle.grizel.in/midsummer/inline/cauldron.png" scaling_mode="pixel_art" ;
      icon_food : png "https://puzzle.grizel.in/midsummer/inline/food.png" scaling_mode="pixel_art" ;
      icon_text : png "https://puzzle.grizel.in/midsummer/inline/text.png" scaling_mode="pixel_art" ;
      icon_blank : png "https://puzzle.grizel.in/sindrella/inline/icon_blank.png" scaling_mode="pixel_art" ;

      ## INLINE GRAPHICS
   }
   ##### SOUNDS #####
   sounds {
   
      ## SOUND EFFECTS

      incidental_cauldron1 : sound_sample "https://puzzle.grizel.in/snowhaven/sound/effects/drop-in-stew.wav";

      ## MUSIC

      music_field : sound_sample "https://puzzle.grizel.in/sindrella/music/svl_field_theme.mp3" ;
      music_enchanted : sound_sample "https://puzzle.grizel.in/sindrella/music/svl_field_theme.mp3" ;
      music_sky : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/before-the-sky.mp3" ;
      music_nymphs : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/nymphs.mp3" ;
      music_celtic : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/celtic-handmaiden.mp3" ;
      music_circus : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/circus.mp3" ;
//      music_magic : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/magic.mp3" ;
      music_tinkerbelle : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/tinkerbelle.mp3" ;
      music_spring : sound_sample "https://puzzle.grizel.in/midsummer/audio/music/spring-waltz.mp3" ;
   }

   ##### FONTS #####
   fonts {
      // userfont_niconne : ttf {
      //    filepath = "https://fonts.gstatic.com/s/niconne/v13/w8gaH2QvRug1_rTfnQyn2Q.woff2"
      //    snap_vert    = "true"
         
      //    // This is the balance between average vertical pixels and average horz pixels for
      //    // use in mapping the font's sizing to the 'columns' property in the theme settings.
      //    horz_pixels  = "8"
      //    vert_pixels  = "8"
      //    font_scale_multiplier = "2.0"
      // }
      
      userfont_envious : base64_ttf horz_pixels = "8" vert_pixels = "8" font_scale_multiplier = "1" experimental_line_height_ratio = "1.2" snap_vert = "true" "";
	}

}

#########################
# Themes
#########################

themes {
   main_theme : theme {
      
      theme_settings {
         layout = SB +G P* "links" D O X
         layout_mobile = SB +G P* "links" D O X
         font = userfont_envious
         header_capitalization = original
         success_jingle = on
         failure_jingle = on
      }
      status_bar {
         // : dynamic_text "header_plus" ;
         : header_text;
         : dynamic_text "clues_remaining" ;
      }
      screen {
         padding_horz_mobile = 10
         status_bar_padding_top = 7
         // widescreen_horz_ratio = 1.5
         paragraph_spacing_multiplier = 1.2
      }
      colors {
         paper = #569
         pen = #fff
         exit_list_header_pen = #000
         exit_list_item_pen = #abf
         exit_list_punctuation_pen = #000
         yousee_header_pen = #000
         yousee_item_punctuation_pen = #000
         yousee_item_pen = #8fa
         prompt_pen = #000
         prompt_prefix_pen = #000
         response_pen = #000
         textbox_pen = #000
         dark_pen = #015
         tutorial_pen = #abf
         choice_pen  = [ "#8fa" ]
      }
      lister_objects {
         list_type = single_line_no_article
         item_capitalization = original
         oxford_comma = true
         sort_order = id
      }
      lister_exits {
         exit_list_style = concise
         is_list_enter = true
         is_list_exit = true
         exit_list_capitalization = lower
      }
      system_messages {
      
         ask_new_game                                   = Would you like to start a new game?
         ask_quit                                       = Do you wish to quit the game?
         be_more_specific                               = Which one?\s
         cant_get_scenery                               = You can't take it.
         cant_see_one_of_those                          = You can't see one of those.
         dont_have_one_of_those                         = You don't have one of those!
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text                             = .
         exit_list_end_text_verbose                     = .
         exit_list_from_here_you_can_go_verbose         = You can go\s
         exit_list_header_concise                       = You can go:\s
         exit_list_last_sep_verbose                     = ,\sor\s
         exit_list_sep_verbose                          = ,\s
         exit_list_there_are_no_obvious_exits           = There are no obvious exits.
         exit_list_to_the_verbose                       = 
         exit_list_you_can_also_go_verbose              = You can also go\s
         i_cant_do_that                                 = You can't do that here.
         invalid_choice                                 = Invalid choice.
         inventory_list_empty                           = Nothing
         inventory_list_end_text                        = .
         inventory_list_final_separator                 = \sand\s
         inventory_list_header                          = You are carrying:\s
         inventory_list_header_verbose                  = You are carrying\s
         inventory_list_separator                       = ,\s
         must_remove_first                              = Try taking it off first.
         not_carried                                    = You can't ${verb} something you are not carrying.
         not_present                                    = ${entity} is not here.
         nothing_here                                   = There is nothing here.
         nothing_to_get                                 = You can't find it.
         object_list_empty                              = Nothing
         object_list_end_text                           = .
         object_list_final_separator                    = \sand\s
         object_list_header                             = You see:\s
         object_list_header_after_initial               = You also see :\s
         object_list_header_verbose                     = You see:\s
         object_list_header_verbose_after_initial       = You also see\s
         object_list_separator                          = ,\s
         ok                                             = Got it!
         on_drop                                        = You drop ${entity}.
         on_get                                         = You take ${entity}.
         on_put                                         = You put ${entity} inside ${entity2}.
         on_put_non_container                           = ${entity} is not a container.
         on_put_non_surface                             = ${entity} is not a surface.
         on_remove                                      = You take off ${entity}.
         on_wear                                        = You wear ${entity}.
         post_quit                                      = You have quit the game.
         prompt                                         = >>
         prompt_prefix                                  = What Now?
         question_prompt_char                           = Choice:
         there_is_nothing_you_can                       = There is nothing you can ${verb} at the moment.
         tutorial_message_prefix                        = Tutorial:\s
         unknown_noun                                   = Unknown noun - "${noun}".
         unknown_verb                                   = Unknown verb - "${verb}".
         worn_suffix                                    = \s(worn)
         you_already_wear                               = You are already wearing that.
         you_are_already_carrying                       = You already have ${entity}.
         you_are_not_holding                            = You are not holding ${entity}.
         you_cant_go_that_direction                     = You can't go that way.
         you_cant_wear                                  = You can't wear that.
         you_cant_wear_anything_else                    = You can't wear anything else without removing something first.
         you_dont_wear                                  = You are not wearing that.
         you_see_nothing_special                        = You see nothing special.
         you_see_nothing_special_2                      = You can't see or interact with that.
      }

   }

}

#########################
# GAME SETTINGS
#########################

game_settings {
   precache_strategy = precache_all
   
   # Changes the width in pixels for graphics printed to the left of printed paragraphs
   experimental_horz_pixels_for_icons = 20
   
   # This setting must be accompanied by inventory_limit in the integers {} section
   inventory_items_limit_var = inventory_limit
}

#########################
# TO-DO LIST
#########################

# Add sound effects